(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var metaService = require('../../services/metaService');

    module.exports = {
        bindings: {
            items: '=',
            options: '='
        },
        templateUrl: 'app/components/columnAreaComponent/column-area-component.html',
        controllerAs: 'vm',
        controller: function ($scope) {

            $scope.options = $scope.$parent.options;

            $scope.grouping = $scope.options.grouping;
            $scope.filters = $scope.options.filters;
            $scope.sorting = $scope.options.sorting;
            $scope.columns = $scope.options.columns;
            $scope.entityType = $scope.options.entityType;
            $scope.externalCallback = $scope.options.externalCallback;
            $scope.isReport = $scope.options.isReport;

            var baseAttrs = [];
            var entityAttrs = [];
            if (metaService.getEntitiesWithoutBaseAttrsList().indexOf($scope.entityType) === -1) {
                baseAttrs = metaService.getBaseAttrs();
            }
            entityAttrs = metaService.getEntityAttrs($scope.entityType);

            $scope.isAllSelected = false;

            $scope.selectAllRows = function () {
                $scope.isAllSelected = !$scope.isAllSelected;
                $scope.items.forEach(function (item) {
                    if (item.hasOwnProperty('groups')) {
                        item.selectedRow = $scope.isAllSelected;
                        item.items.forEach(function (row) {
                            row.selectedRow = $scope.isAllSelected;
                        })
                    } else {
                        item.selectedRow = $scope.isAllSelected;
                    }
                })
            };

            $scope.isColumnFloat = function (column) {

                if (column.value_type == 'float' || column.value_type == 20) {
                    return true
                }

                return false;
            };

            $scope.sortHandler = function (column, sort) {
                var i;
                for (i = 0; i < $scope.columns.length; i = i + 1) {
                    if (!$scope.columns[i].options) {
                        $scope.columns[i].options = {};
                    }
                    $scope.columns[i].options.sort = null;
                }
                column.options.sort = sort;

                if (column.hasOwnProperty('id')) {
                    $scope.sorting.column.id = column.id;
                    $scope.sorting.column.key = null;
                    $scope.sorting.column.sort = sort;
                } else {
                    $scope.sorting.column.id = null;
                    $scope.sorting.column.key = column.key;
                    $scope.sorting.column.sort = sort;
                }
                $scope.externalCallback({silent: true, options: {columns: $scope.columns}});
            };

            $scope.selectSubtotalType = function (column, type) {

                if (!column.hasOwnProperty('report_settings')) {
                    column.report_settings = {};
                }

                if (column.report_settings.subtotal_formula_id == type) {
                    column.report_settings.subtotal_formula_id = null;
                } else {
                    column.report_settings.subtotal_formula_id = type;
                }

                //console.log('$scope.column11111s JSON', JSON.parse(JSON.stringify(column)));
                //console.log('$scope.column11111s JSON', JSON.parse(JSON.stringify($scope.columns)));

                $scope.externalCallback({silent: true, options: {columns: $scope.columns}});
            };

            $scope.checkSubtotalFormula = function (column, type) {

                if (column.hasOwnProperty('report_settings') && column.report_settings) {
                    if (column.report_settings.subtotal_formula_id == type) {
                        return true;
                    }

                }

                return false

            };

            $scope.$watchCollection('columns', function () {


                setTimeout(function () {

                    $scope.externalCallback({silent: true, options: {columns: $scope.columns}});
                    $scope.$apply();

                }, 0)
            });

            $scope.removeColumn = function (column) {
                if (column.id) {
                    $scope.columns = $scope.columns.map(function (item) {
                        if (item.id === column.id || item.key === column.key) {
                            item = undefined
                        }
                        return item
                    }).filter(function (item) {
                        return !!item;
                    });
                }
                if (column.key) {
                    $scope.columns = $scope.columns.map(function (item) {
                        if (item.key === column.key) {
                            return undefined
                        }
                        return item
                    }).filter(function (item) {
                        return !!item;
                    });
                }
                //console.log('remove', $scope.columns);

                //console.log('$scope.columns', $scope.columns)

                setTimeout(function () {
                    $scope.externalCallback({silent: true, options: {columns: $scope.columns}});
                }, 0)
            };

            $scope.reportHideSubtotal = function (column) {

                if (!column.hasOwnProperty('report_settings')) {
                    column.report_settings = {};
                }

                column.report_settings.hide_subtotal = !column.report_settings.hide_subtotal;

            }
        }
    }

}());
},{"../../services/metaService":21}],2:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    module.exports = {
        bindings: {
            options: '='
        },
        templateUrl: 'app/components/groupingAreaComponent/grouping-area-component.html',
        controllerAs: 'vm',
        controller: function ($scope, ptDialog) {

            $scope.options = $scope.$parent.options;

            $scope.grouping = $scope.options.grouping;
            $scope.filters = $scope.options.filters;
            $scope.columns = $scope.options.columns;
            $scope.sorting = $scope.options.sorting;
            $scope.folding = $scope.options.folding;
            $scope.entityType = $scope.options.entityType;
            $scope.externalCallback = $scope.options.externalCallback;
            $scope.isReport = $scope.options.isReport;

            $scope.sortHandler = function (group, sort) {
                var i;
                for (i = 0; i < $scope.grouping.length; i = i + 1) {
                    if (!$scope.grouping[i].options) {
                        $scope.grouping[i].options = {};
                    }
                    $scope.grouping[i].options.sort = null;
                }
                group.options.sort = sort;
                if (group.hasOwnProperty('id')) {
                    $scope.sorting.group = {};
                    $scope.sorting.group.id = group.id;
                    $scope.sorting.group.key = null;
                    $scope.sorting.group.sort = sort;
                } else {
                    $scope.sorting.group = {};
                    $scope.sorting.group.id = null;
                    $scope.sorting.group.key = group.key;
                    $scope.sorting.group.sort = sort;
                }
                $scope.externalCallback({silent: true, options: {grouping: $scope.grouping}});
            };

            $scope.openGroupSettings = function ($mdOpenMenu, ev) {
                $mdOpenMenu(ev);
            };

            $scope.$watchCollection('grouping', function () {


                if ($scope.isReport == true) {
                    $scope.grouping.forEach(function (group) {

                        if (!group.hasOwnProperty('report_settings') && !group.report_settings) {
                            group.report_settings = {subtotal_type: 'area'};
                        } else {
                            if (group.report_settings.subtotal_type == undefined) {
                                group.report_settings.subtotal_type = 'area';
                            }

                        }

                    })
                }

                setTimeout(function () {
                    $scope.externalCallback({silent: true, options: {grouping: $scope.grouping}});
                    $scope.$apply();
                }, 0)
            });

            $scope.toggleGroupFold = function () {
                $scope.folding = !$scope.folding;
                setTimeout(function () {
                    $scope.externalCallback({silent: true, options: {grouping: $scope.grouping}});
                    $scope.$apply();
                }, 0)
            };

            $scope.removeGroup = function (group) {
                //console.log('grouping', $scope.grouping);
                //console.log('remove', group);
                if (group.id) {
                    $scope.grouping = $scope.grouping.map(function (item) {
                        if (item.id === group.id) {
                            item = undefined
                        }
                        return item
                    }).filter(function (item) {
                        return !!item;
                    });
                }
                if (group.name) {
                    $scope.grouping = $scope.grouping.map(function (item) {
                        if (item.name === group.name) {
                            item = undefined
                        }
                        return item
                    }).filter(function (item) {
                        return !!item;
                    });
                }
                //console.log('grouping after', $scope.grouping);
                setTimeout(function () {
                    $scope.externalCallback({silent: true, options: {grouping: $scope.grouping}});
                }, 0)
            };

            $scope.reportSetSubtotalType = function (group, type, $index) {

                if (!group.hasOwnProperty('report_settings') || group.report_settings == undefined) {
                    group.report_settings = {};
                }

                if (type == 'area') {

                    $scope.grouping.forEach(function (groupItem, $itemIndex) {

                        if ($itemIndex > $index) {
                            groupItem.disableLineSubtotal = true;

                            //console.log('group', groupItem);

                            if (groupItem.hasOwnProperty('report_settings')) {

                                if (groupItem.report_settings.subtotal_type == 'line') {
                                    groupItem.report_settings.subtotal_type = false;
                                }
                            }
                        } else {
                            if ($itemIndex < $index) {
                                groupItem.disableLineSubtotal = false;
                            }
                        }


                    });
                }

                if (type == 'line') {

                    $scope.grouping.forEach(function (groupItem, $itemIndex) {

                        if ($itemIndex > $index) {
                            groupItem.disableLineSubtotal = false;
                        }

                    });
                }

                if (group.report_settings.subtotal_type == type) {
                    group.report_settings.subtotal_type = false;
                } else {
                    group.report_settings.subtotal_type = type;
                }


                $scope.externalCallback({silent: true, options: {grouping: $scope.grouping}});
            };

            $scope.isReportGroupHaveExtSettings = function (group, $index, subtotalType) {

                var haveAccess = false;
                var preInitOffset = 0;
                var initIndex = 0;

                $scope.grouping.forEach(function (groupItem, $groupItemIndex) {

                    if ($scope.columns.length > $groupItemIndex) {
                        if (groupItem.hasOwnProperty('id')) {
                            if (groupItem.id == $scope.columns[$groupItemIndex - preInitOffset].id) {
                                initIndex = preInitOffset;
                            } else {
                                preInitOffset = preInitOffset + 1;
                            }
                        } else {
                            if (groupItem.hasOwnProperty('key') && $scope.columns[$groupItemIndex] && $scope.columns[$groupItemIndex].hasOwnProperty('key')) {

                                if (groupItem.key == $scope.columns[$groupItemIndex - preInitOffset].key) {
                                    initIndex = preInitOffset;
                                } else {
                                    preInitOffset = preInitOffset + 1;
                                }
                            } else {
                                preInitOffset = preInitOffset + 1;
                            }
                        }
                    }

                });

                if ($scope.columns.length > $index) {
                    if (group.hasOwnProperty('id') && $scope.columns[$index - initIndex] && $scope.columns[$index - initIndex].hasOwnProperty('id')) {
                        if (group.id == $scope.columns[$index - initIndex].id) {
                            haveAccess = true;
                        }
                    } else {
                        if (group.hasOwnProperty('key') && $scope.columns[$index - initIndex] && $scope.columns[$index - initIndex].hasOwnProperty('key')) {
                            if (group.key == $scope.columns[$index - initIndex].key) {
                                haveAccess = true;
                            }
                        }

                    }
                }

                if (group.hasOwnProperty('disableLineSubtotal') && group.disableLineSubtotal == true && subtotalType == 'line') {
                    haveAccess = false;
                }

                return haveAccess;

            };

            $scope.openModalSettings = function (ev) {

                console.log('ptDialog', ptDialog);

                ptDialog.create({
                    controller: 'DialogController as vm', // ../directives/gTable/gModalComponents
                    templateUrl: 'app/controllers/dialogController/dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    locals: {
                        data: {
                            callback: $scope.externalCallback,
                            parent$scope: $scope
                        }
                    }
                });

            }
        }
    }

}());
},{}],3:[function(require,module,exports){
/**
 * Created by szhitenev on 10.03.2017.
 */
(function () {

    'use strict';

    var GroupTableService = require('../../services/groupTableService');
    var entityService = require('../../services/entityService');

    module.exports = {
        bindings: {
            options: '='
        },
        controllerAs: 'vm',
        templateUrl: 'app/components/partyTableComponent/party-table-component.html',
        controller: function ($scope) {

            var vm = this;

            console.log('party table', vm);

            vm.groupTableService = GroupTableService.getInstance(true);

            vm.entityType = 'entity';

            var updateOptions = function (params) {
                if (params.hasOwnProperty('grouping')) {
                    vm.options.grouping = params.grouping;
                }
                if (params.hasOwnProperty('columns')) {
                    vm.options.columns = params.columns;
                }
                if (params.hasOwnProperty('filters')) {
                    vm.options.filters = params.filters;
                }
            };

            var defaultOptions = {
                columns: [],
                filters: [],
                grouping: [],
                sorting: {
                    group: {},
                    column: {}
                },
                folding: [],
                entity_models: [],
                grouping_type: 'area',
                interface: {
                    dragging: false
                },
                externalCallback: function (params) {

                    console.log('params', params);

                    if (params.hasOwnProperty('options')) {
                        updateOptions(params.options);
                    }

                    vm.options.lastUpdate = new Date().getTime();

                    vm.originalItems = JSON.parse(JSON.stringify(vm.items));

                    vm.groupTableService.setItems(vm.originalItems);

                    vm.groupTableService.columns.setColumns(vm.options.columns);
                    vm.groupTableService.filtering.setFilters(vm.options.filters);

                    //console.log('vm.options.grouping_type', vm.options.grouping_type);

                    if (vm.options.grouping_type == 'area') {
                        vm.groupTableService.grouping.setGroupsWithColumns(vm.options.grouping, vm.options.columns, vm.options.entity_models);
                        vm.groupTableService.sorting.group.sort(vm.options.sorting.group);
                    }
                    if (vm.options.grouping_type == 'breadcrumbs') {
                        vm.groupTableService.grouping.setGroups(vm.options.grouping, vm.options.entity_models);
                        vm.groupTableService.sorting.group.sort(vm.options.sorting.group);
                        vm.groupTableService.sorting.column.sort(vm.options.sorting.column);
                    }
                    //console.log("EXTERNAL CALLBACK ", vm.folding);
                    //vm.groupTableService.folding.setFolds(vm.options.folding);
                    //console.log('UPDATE TABLE scope.sorting.group', vm.sorting.group);

                    //console.log('vm.options', vm.options);

                    //console.log('vm.options.sorting.group', vm.options.sorting.group);


                    //console.log('projection', vm.groupTableService.projection());
                },

                pagination: {
                    itemsPerPage: 20,
                    currentPage: 1,
                    paginationItemsTotal: 0
                }
            };

            function extendDefaults(options, defaults) {

                var optionsKeys = Object.keys(options);
                var defaultKeys = Object.keys(defaults);

                defaultKeys.forEach(function (defaultKey) {

                    var exist = false;

                    optionsKeys.forEach(function (key) {
                        if (key == defaultKey) {
                            exist = true;
                        }
                    });

                    if (!exist) {
                        options[defaultKey] = defaults[defaultKey];
                    }

                });

                return options;

            }

            this.$onInit = function () {

                console.log('Init party table');

                vm.items = vm.options.items;
                vm.options = extendDefaults(vm.options, defaultOptions);

                entityService.setEntities(vm.options.entity_models);

                //console.log('vm.options', vm.options);
            };


        }
    }

}());
},{"../../services/entityService":15,"../../services/groupTableService":19}],4:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    //var fieldResolverService = require('../../services/fieldResolverService');

    module.exports = {
        bindings: {
            options: '=',
            reportOptions: '='
        },
        templateUrl: 'app/components/sidebarAreaComponent/sidebar-area-component.html',
        controllerAs: 'vm',
        controller: function ($scope) {

            $scope.options = $scope.$parent.options;

            $scope.filters = $scope.options.filters;
            $scope.isReport = $scope.options.isReport;
            $scope.entityType = $scope.options.entityType;
            $scope.externalCallback = $scope.options.externalCallback;

            $scope.fields = {};
            //$scope.reportOptions = {};

            $scope.filters.forEach(function (item) {
                if (!item.options) {
                    //item.options = {enabled: false};
                }
                //item.options.enabled = false;
            });

            $scope.openReportSettings = function ($event) {

                //console.log('$scope.reportOptions', $scope.reportOptions);

                $mdDialog.show({
                    controller: 'GReportSettingsDialogController as vm',
                    templateUrl: 'views/dialogs/g-report-settings-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: $event,
                    locals: {
                        reportOptions: $scope.reportOptions
                    }
                }).then(function (res) {

                    //console.log('res', res);

                    if (res.status == 'agree') {
                        $scope.reportOptions = res.data;
                    }

                });


            };

            $scope.calculateReport = function () {
                //console.log('calculate report');
                $scope.reportOptions["task_id"] = undefined;
                $scope.externalCallback({silent: false, options: {filters: $scope.filters}});
            };

            $scope.resizeFilterSideNav = function (actionType) {
                if (actionType === 'collapse') {
                    $('body').addClass('filter-side-nav-collapsed');
                    $scope.sideNavCollapsed = true;
                } else {
                    $('body').removeClass('filter-side-nav-collapsed');
                    $scope.sideNavCollapsed = false;
                }
                var interval = setInterval(function () {
                    $(window).trigger('resize');
                }, 50);

                setTimeout(function () {
                    clearInterval(interval)
                }, 300);
            };

            $scope.$watchCollection('filters', function () {

                //$scope.externalCallback();

                var promises = [];

                $scope.filters.forEach(function (item) {
                    //console.log("filter's item ", item);
                    if (!$scope.fields.hasOwnProperty(item.key)) {
                        //if (item['value_type'] == "mc_field" || item['value_type'] == "field") {
                        //    if (item.key == 'tags') {
                        //        promises.push(fieldResolverService.getFields(item.key, {entityType: $scope.entityType}));
                        //    } else {
                        //        promises.push(fieldResolverService.getFields(item.key));
                        //    }
                        //}

                        //console.log("filter's promises ", promises);
                    }
                });

                Promise.all(promises).then(function (data) {
                    //console.log("filter's data ", data);
                    data.forEach(function (item) {
                        $scope.fields[item.key] = item.data;
                    });
                    $scope.$apply(
                        function () {
                            //setTimeout(function () {
                            //    $(elem).find('.md-select-search-pattern').on('keydown', function (ev) {
                            //        ev.stopPropagation();
                            //    });
                            //}, 100);
                        }
                    )
                    ;
                });
            });

            $scope.openFilterSettings = function ($mdOpenMenu, ev) {
                $mdOpenMenu(ev);
            };

            $scope.toggleFilterState = function () {
                if ($scope.isReport == true) {
                    $scope.externalCallback({silent: true, options: {filters: $scope.filters}});
                } else {
                    $scope.externalCallback({silent: false, options: {filters: $scope.filters}});
                }
            };

            $scope.filterChange = function (filter) {
                if ($scope.isReport == true) {
                    $scope.externalCallback({silent: true, options: {filters: $scope.filters}});
                } else {
                    $scope.externalCallback({silent: false, options: {filters: $scope.filters}});
                }
            };

            $scope.selectAll = function () {
                $scope.filters.forEach(function (item) {
                    item.options.enabled = true;
                });
                if ($scope.isReport == true) {
                    $scope.externalCallback({silent: true, options: {filters: $scope.filters}});
                } else {
                    $scope.externalCallback({silent: false, options: {filters: $scope.filters}});
                }
            };

            $scope.clearAll = function () {
                $scope.filters.forEach(function (item) {
                    item.options.query = '';
                });
                if ($scope.isReport == true) {
                    $scope.externalCallback({silent: true, options: {filters: $scope.filters}});
                } else {
                    $scope.externalCallback({silent: false, options: {filters: $scope.filters}});
                }
            };

            $scope.deselectAll = function () {
                $scope.filters.forEach(function (item) {
                    item.options.enabled = false;
                });
                if ($scope.isReport == true) {
                    $scope.externalCallback({silent: true, options: {filters: $scope.filters}});
                } else {
                    $scope.externalCallback({silent: false, options: {filters: $scope.filters}});
                }
            };


            if ($scope.options.isRootEntityViewer == false) {

                $scope.$on('rootEditorEntityIdDown', function (event, data) {

                    $scope.filters.forEach(function (item) {
                        //console.log('item', item);
                        if (item.hasOwnProperty('options') && item.options.useFromAbove == true) {

                            if (item.key == data.entityType) {
                                item.options.query = [data.editorEntityId]
                            }

                        }

                    });

                    $scope.externalCallback({silent: true, options: {filters: $scope.filters}});

                });
            }

            $scope.useFromAbove = function (filter) {

                if (!filter.hasOwnProperty('options')) {
                    filter.options = {};
                }

                filter.options.useFromAbove = !filter.options.useFromAbove;

                $scope.externalCallback({silent: true, options: {filters: $scope.filters}});
            };

            $scope.removeFilter = function (filter) {
                //console.log('filter to remove is ', filter);
                $scope.filters = $scope.filters.map(function (item) {
                    // if (item.id === filter.id || item.name === filter.name) {
                    if (item.name === filter.name) {
                        // return undefined;
                        item = undefined;
                    }
                    //console.log('filter in filters list', item);
                    return item;
                }).filter(function (item) {
                    return !!item;
                });

                $scope.externalCallback({silent: true, options: {filters: $scope.filters}});
            };


            $scope.getFilterType = function (filterType) {
                switch (filterType) {
                    case 'field':
                    case 'mc_field':
                        return true;
                        break;
                    default:
                        return false;
                        break;
                }
            };
            //console.log('filter fields', $scope.filters);
        }
    }

}());
},{}],5:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    //var bindCellService = require('../../services/bindCellService');
    var groupTableReportService = require('../../services/groupTableReportService');
    //var groupTableBodyHelper = require('../../helpers/groupTableBodyHelper');

    var GroupTableService = require('../../services/groupTableService');

    module.exports = {
        bindings: {
            options: '=',
            items: '='
        },
        templateUrl: 'app/components/tableBodyComponent/table-body-component.html',
        controllerAs: 'vm',
        controller: function ($scope) {

            $scope.options = $scope.$parent.options;
            $scope.items = $scope.$parent.items;

            $scope.externalCallback = $scope.options.externalCallback;
            $scope.grouping = $scope.options.grouping;
            $scope.columns = $scope.options.columns;
            $scope.entityType = $scope.options.entityType;
            $scope.reportIsReady = $scope.options.reportIsReady;
            $scope.grouping_type = $scope.options.grouping_type;

            $scope.readyStatus = {
                cellsFirstReady: false,
                cellsSecondReady: false,
                attributeTypesReady: false,
                classifiersReady: false
            }; // if groups not exist

            var entityType = $scope.entityType;
            var baseAttrs = [];
            var entityAttrs = [];

            var promisesEntityFieldsAlreadyAdded = [];
            var promisesAttributeTypesAlreadyAdded = {};

            var entityFieldsArray = {};

            var groupTableService = GroupTableService.getInstance();

            $scope.itemsProjection = function () {
                return groupTableService.projection();
            };


            $scope.reportItemsProjection = function () {
                return $scope.reportItems;
            };


            //baseAttrs = metaService.getBaseAttrs();
            //
            //
            //entityAttrs = metaService.getEntityAttrs(entityType);

            //setInterval(function () {
            //    $('.g-table-section .custom-scrollbar')[0].dispatchEvent(new Event('scroll'));
            //}, 1000);

            function getCellsCaptionsPatterns(item, itemIndex) {

                var result = [];

                item.cellsCaptions.forEach(function (cellCaption, $index) {
                    if ($index <= itemIndex) {
                        result.push(cellCaption.comparePattern);
                    }
                });

                return result.join('_-_');
            }

            $scope.toggleGroupFold = function (item, $index) {

                if ($scope.grouping_type == 'area') {

                    item.cellsCaptions[$index].isFolded = !item.cellsCaptions[$index].isFolded;

                    item.subTotal = item.cellsCaptions[$index].subTotal;

                    var itemCellCaptionsPatterns = getCellsCaptionsPatterns(item, $index);

                    var localItems = []; // to find first element, and revert isFolded;

                    $scope.reportItems.forEach(function (reportItem) {

                        var reportCellCaptionsPatterns = getCellsCaptionsPatterns(reportItem, $index);

                        if (itemCellCaptionsPatterns == reportCellCaptionsPatterns) {

                            reportItem.isFirstOfFolded = false;
                            reportItem.cellsCaptions[$index].isFolded = item.cellsCaptions[$index].isFolded;

                            localItems.push(reportItem);
                        }


                    });


                    //localItems[0].isFirstOfFolded = true;
                    localItems[0].isFirstOfFolded = item.cellsCaptions[$index].isFolded;

                    localItems.forEach(function (locItem) {

                        locItem.cellsCaptions.forEach(function (cellCaption, cellCaptionIndex) {

                            if (cellCaptionIndex > $index) {
                                cellCaption.isFolded = false;
                            }

                        })


                    });

                    //console.log('localItems', localItems);

                } else {
                    item.isFolded = !item.isFolded;
                }
            };

            $scope.itemIsFolded = function (item) {

                var isShowed = true;

                //console.log('item', item);
                if (item.hasOwnProperty('cellsCaptions')) {
                    if (item.isFirstOfFolded != true) {
                        item.cellsCaptions.forEach(function (cellCaption) {

                            if (cellCaption.hasOwnProperty('isFolded') && cellCaption.isFolded == true) {
                                isShowed = false;
                            }

                        });
                    }
                }


                return isShowed;

            };

            $scope.openEntityMenu = function ($mdOpenMenu, ev) {
                $mdOpenMenu(ev);
            };

            $scope.checkReportColumnCaption = function (cellsCaptions, column, $columnIndex) {

                if ($columnIndex > cellsCaptions.length - 1) { // 1 - index
                    return false;
                }

                // todo cellCaptions[columnIndex] == column

                return true;

            };

            var getFieldDisplayNamesArray = function () {
                return new Promise(function (resolve, reject) {
                    var i;
                    var promises = [];

                    if ($scope.grouping_type == 'area') {

                        //console.log('entityFieldsArray', entityFieldsArray);
                        //console.log('$scope.columns[i]', $scope.columns);

                    } else {

                        for (i = 0; i < $scope.columns.length; i = i + 1) {
                            var attributeExist = false;
                            //console.log('12312312312312312', $scope.columns[i]);
                            if ($scope.columns[i]['value_type'] == 'field') {
                                //promises.push(bindCellService.findEntities($scope.columns[i].key, {entityType: entityType}));
                            }
                            if ($scope.columns[i]['value_type'] == 30) {
                                //console.log('$scope.columns[i]', $scope.columns[i]);

                                if (!promisesAttributeTypesAlreadyAdded[entityType]) {
                                    promisesAttributeTypesAlreadyAdded[entityType] = [];
                                }

                                promisesAttributeTypesAlreadyAdded[entityType].forEach(function (attribute) {
                                    if (attribute == $scope.columns[i].id) {
                                        attributeExist = true;
                                    }
                                });


                            }
                        }
                    }

                    findEntityFields();

                    Promise.all(promises).then(function (results) {
                        //console.log('results11111111111111111', results);
                        results.forEach(function (item) {
                            if (item.key) {

                                entityFieldsArray[item.key] = item.data;
                            } else {
                                entityFieldsArray['classifier_' + item.id] = item;
                            }
                        });

                        $scope.readyStatus.attributeTypesReady = true;

                    }).then(function () {
                        $scope.$apply();
                    })

                });

            };

            if ($scope.grouping && $scope.grouping.length) {
                syncGroupsAndColumns();
            }

            function findGroups() {

                return new Promise(function (resolve, reject) {

                    var i, g;
                    var promisesClassifiers = [];
                    var promisesEntityFields = [];


                    var items = $scope.items;
                    var classifierExist = false;
                    var entityExist = false;

                    //console.log('ITEMS', items);

                    for (i = 0; i < $scope.items.length; i = i + 1) {
                        //console.log('$scope.items[i].groups', $scope.items[i].groups);
                        if ($scope.items[i].hasOwnProperty('groups')) {
                            for (g = 0; g < $scope.items[i].groups.length; g = g + 1) {

                                entityExist = false;

                                if ($scope.items[i].groups[g]['value_type'] === 'field') {

                                    if ($scope.items[i].groups[g].value !== null) {

                                        promisesEntityFieldsAlreadyAdded.forEach(function (entity) {
                                            if (entity == $scope.items[i].groups[g].key + '_' + $scope.items[i].groups[g].value) {
                                                entityExist = true;
                                            }
                                        });

                                        if (!entityExist) {
                                            promisesEntityFieldsAlreadyAdded.push($scope.items[i].groups[g].key + '_' + $scope.items[i].groups[g].value);
                                            //promisesEntityFields.push(bindCellService.getByKey($scope.items[i].groups[g].key, $scope.items[i].groups[g].value, {entityType: $scope.entityType}))
                                        }
                                    }
                                }
                            }
                        }
                    }


                    Promise.all(promisesEntityFields).then(function (data) {

                        if (data.length) {
                            var i;

                            //console.log('data', data);

                            for (i = 0; i < data.length; i = i + 1) {

                                if (entityFieldsArray[data[i].key] == undefined) {
                                    entityFieldsArray[data[i].key] = [];
                                }
                                entityFieldsArray[data[i].key].push(data[i].data);
                            }
                        }

                        $scope.readyStatus.cellsFirstReady = true;
                        //console.log('cells first ready');
                        resolve({status: "groups ready"});


                    }).then(function () {
                        $scope.$apply();
                    })

                })
            }


            $scope.isSubtotalHided = function (column) {
                if (column.hasOwnProperty('report_settings') && column.report_settings) {

                    //console.log('colum222222222222222n', column);
                    if (column.report_settings.subtotal_formula_id) {
                        if (column.report_settings.hide_subtotal == true) {
                            return false;
                        }
                        return true;
                    } else {
                        return false;
                    }
                }

                return true;
            };

            $scope.resolveReportCellItemBackground = function (rowType, item, column, $index) {
                var result = '';

                //console.log('item', item);

                if (item.hasOwnProperty('value_options')) {

                    if (item.value_options.type == 'area') {
                        result = 'cell-area-bg-' + item.value_options.level;
                    }

                    if (rowType == 'subtotal-line') {

                        if (item.value_options.type == 'line') {
                            result = 'cell-line-bg-' + item.value_options.level;
                        }
                    }

                }

                return result;
            };

            $scope.resolveReportCellBackground = function (rowType, item, column, $index) {

                if ($index == 1) {
                    //console.log(rowType, item, column, $index);
                }

                var result = '';


                if (item.hasOwnProperty('cellsCaptions')) {

                    var cellCaption = item.cellsCaptions[$index];

                    if (cellCaption && cellCaption.hasOwnProperty('level') && cellCaption.hasOwnProperty('type')) {

                        if (cellCaption.type !== 'empty') {
                            if (cellCaption.type == 'area') {
                                result = 'cell-area-bg-' + cellCaption.level;
                            }

                            if (rowType == 'subtotal-line') {

                                //console.log('item', item);

                                if (cellCaption.type == 'line') {
                                    result = 'cell-line-bg-' + cellCaption.level;
                                }
                            }
                        }
                    }
                }

                return result;

            };

            $scope.resolveReportCellBorder = function (rowType, item, column, $index) {

                var result = '';

                //console.log('item', item);

                if (rowType == 'subtotal') {

                    if ($index < item.cellsCaptions.length) {
                        if (item.cellsCaptions[$index] == 'Subtotal') {
                            result = 'r-c-border-left-border-bottom';
                        }

                        if (item.cellsCaptions[$index + 1] == 'Subtotal') {
                            result = 'r-c-border-left-border-right'
                        }

                        if (item.cellsCaptions[$index - 1] == 'Subtotal') {
                            result = 'r-c-border-right-border-bottom-border-top';
                        }

                        if ($index == 0) {
                            result = 'r-c-border-left-border-right'
                        }

                    } else {
                        result = 'r-c-border-right-border-bottom-border-top';
                    }

                }

                if (rowType == 'normal') {

                    result = 'r-c-border-right-border-bottom-border-top';

                    if ($index < item.cellsCaptions.length) {
                        result = 'r-c-border-left-border-right'
                    }

                    if ($index == 0) {
                        result = 'r-c-border-left-border-right'
                    }


                }

                if (rowType == 'header') {

                    result = 'r-c-border-right-border-bottom-border-top';

                    if ($index < item.cellsCaptions.length) {
                        result = 'r-c-border-left-border-right'
                    }
                    if ($index == 0) {
                        result = 'r-c-border-left-border-right'
                    }

                }

                return result;

            };

            function syncGroupsAndColumns() {

                //console.log("$scope.grouping!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", $scope.grouping);

                var promises = [];

                promises.push(getFieldDisplayNamesArray());
                promises.push(findGroups());

                //console.log('??????????????????', promises);

                Promise.all(promises).then(function () {
                    $scope.$apply();
                })
            }

            function findEntityFields() {

                return new Promise(function (resolve, reject) {
                    var i, g, e;
                    var promises = [];

                    for (i = 0; i < $scope.items.length; i = i + 1) {

                        if ($scope.items[i].hasOwnProperty('groups')) {
                            for (g = 0; g < $scope.items[i].groups.length; g = g + 1) {

                                if ($scope.items[i].groups[g]['value_type'] === 'field' && $scope.items[i].groups[g].value !== null) {
                                    var entityExist = false;

                                    promisesEntityFieldsAlreadyAdded.forEach(function (entity) {
                                        if (entity == $scope.items[i].groups[g].key + '_' + $scope.items[i].groups[g].value) {
                                            entityExist = true;
                                        }
                                    });

                                    if (!entityExist) {
                                        promisesEntityFieldsAlreadyAdded.push($scope.items[i].groups[g].key + '_' + $scope.items[i].groups[g].value);
                                        //promises.push(bindCellService.getByKey($scope.items[i].groups[g].key, $scope.items[i].groups[g].value))
                                    }

                                }
                            }
                        }
                    }

                    Promise.all(promises).then(function (results) {
                        //console.log('RESULTS', results);
                        results.forEach(function (item) {
                            //console.log('-------------------------------', item);
                            if (item.key) {
                                if (entityFieldsArray[item.key] == undefined) {
                                    entityFieldsArray[item.key] = [];
                                }
                                if (item.data !== undefined) {
                                    entityFieldsArray[item.key].push(item.data);
                                }
                            }
                        });

                        $scope.readyStatus.cellsSecondReady = true;

                        resolve({status: "entity field ready"});

                    }).then(function () {
                        $scope.$apply();
                    })
                })

            }

            $scope.checkRowSelection = function (item) {
                //console.log('checkRowSelection', item);

                if (item) {
                    if (item.selectedRow || item.simpleSelect) {
                        return true;
                    }
                }
                return false;
            };

            $scope.toggleSelectRow = function ($event, item) {

                if (item.simpleSelect == true) {
                    item.simpleSelect = false;
                }
                item.selectedRow = !item.selectedRow;
                if ($scope.isAllSelected === true && item.selectedRow === false) {
                    $scope.isAllSelected = false;
                }

                var allSelected = true;
                $scope.items.forEach(function (item) {
                    if (item.hasOwnProperty('groups')) {
                        if (!!item.selectedRow === false) {
                            allSelected = false;
                        }
                        item.items.forEach(function (row) {
                            if (!!row.selectedRow === false) {
                                allSelected = false;
                            }
                        })
                    } else {
                        if (!!item.selectedRow === false) {
                            allSelected = false;
                        }
                    }
                });

                if (allSelected) {
                    $scope.isAllSelected = true;
                }
                $event.stopPropagation();
            };

            $scope.checkReady = function () {

                //console.log('$scope.options.reportIsReady', $scope.options.reportIsReady);

                return true;

                if ($scope.readyStatus.cellsFirstReady == true &&
                    $scope.readyStatus.cellsSecondReady == true &&
                    $scope.readyStatus.classifiersReady == true &&
                        //$scope.reportIsReady == true &&
                    $scope.options.reportIsReady == true &&
                    $scope.readyStatus.attributeTypesReady == true) {

                    $scope.$parent.triggerResize();

                    return true;
                }
                return false;
            };

            $scope.bindGroupValue = function (group) {

                //console.log('group', group);

                var result = '';

                if (group.value_type == 'integer'
                    || group.value_type == 'float'
                    || group.value_type == 'string'
                    || group.value_type == 'date'
                    || group.value_type == 'value_string'
                    || group.value_type == 'value_float'
                    || group.value_type == 'value_date'
                ) {
                    result = group.value;
                }

                //console.log('result string', result);

                return result;
            };

            $scope.bindCellSubTotal = function (values, column) {

                //console.log(column);

                var result = '';

                if (column.hasOwnProperty('key')) {
                    result = values[column.key];
                }

                if (result !== undefined) {

                    if (column.value_type == 20 || column.value_type == 'float') {
                        return result.toFixed(2) + '';
                    } else {
                        return result;
                    }
                }

            };

            $scope.bindCell = function (groupedItem, column, options) {

                if (column.hasOwnProperty('r_entityType')) {

                    return groupedItem[column.r_entityType + '_attribute_' + column.source_name];

                }

                function findNodeInChildren(item) {
                    if (groupedItem[column.name] == item.id) {
                        classifierNode = item;
                    } else {
                        if (item.children.length) {
                            item.children.forEach(findNodeInChildren);
                        }
                    }
                }

                //console.log('column', column);

                if (column.hasOwnProperty('id')) {
                    if (column['value_type'] === 30) {
                        var classifierNode;
                        if (entityFieldsArray && entityFieldsArray['classifier_' + column.id]) {
                            entityFieldsArray['classifier_' + column.id].classifiers.forEach(findNodeInChildren);
                            if (classifierNode) {
                                if (classifierNode['display_name']) {
                                    return classifierNode['display_name'];
                                }
                                return classifierNode['name'];
                            }
                        }
                        return '';
                    } else {

                        //console.log('groupedItem', groupedItem);

                        if (column.hasOwnProperty('columnType') && column.columnType == 'custom-field') {

                            result = '';

                            //console.log('groupedItem', groupedItem);

                            groupedItem.custom_fields.forEach(function (customField) {

                                if (customField.custom_field == column.id) {
                                    result = customField.value;
                                }

                            });

                            return result

                        } else {

                            if (groupedItem.hasOwnProperty(column.name)) {
                                return groupedItem[column.name];
                            } else {
                                //return groupTableBodyHelper.findGroupedItemAttribute(groupedItem, column.id);
                            }
                        }
                    }
                } else {

                    var i, e, c;
                    for (i = 0; i < baseAttrs.length; i = i + 1) {
                        if (baseAttrs[i].key === column.key) {
                            return groupedItem[baseAttrs[i].key];
                        }
                    }

                    for (e = 0; e < entityAttrs.length; e = e + 1) {

                        if (entityAttrs[e].key === column.key) {
                            if (column['value_type'] === 'field') {
                                var _groupedItemVal = groupedItem[entityAttrs[e].key];
                                //if ($scope.readyStatus.cellsFirstReady) {
                                //console.log('entityFieldsArray', entityFieldsArray);
                                if (entityFieldsArray[column.key]) {
                                    var result = entityFieldsArray[column.key].filter(function (item) {
                                        return item.id === _groupedItemVal;
                                    })[0];

                                }
                                if (result) {
                                    if (column['key'] === 'instrument' && result['user_code']) {
                                        return result['user_code'];
                                    } else if (column['key'] === 'price_download_scheme') {
                                        return result['scheme_name'];
                                    }
                                    else if (result['display_name']) {
                                        return result['display_name'];
                                    }
                                    return result['name'];
                                }
                                return '';
                            } else {
                                if (column['value_type'] === 'mc_field') {

                                    if (column.key == 'object_permissions_user') {

                                        if (groupedItem[entityAttrs[e].key].length) {

                                            //console.log('$scope.options.permission_selected_entity', $scope.options.permission_selected_entity);

                                            if ($scope.options.permission_selected_entity == 'user') {

                                                var resultPermission = [];

                                                groupedItem[entityAttrs[e].key].forEach(function (permission) {

                                                    if (permission.member == $scope.options.permission_selected_id) {
                                                        if (permission.permission.indexOf('change') == 0) {
                                                            resultPermission.push('Change');
                                                        }
                                                        if (permission.permission.indexOf('manage') == 0) {
                                                            resultPermission.push('Manage');
                                                        }
                                                    }
                                                });

                                                return resultPermission.join(', ');

                                            }
                                        }
                                    }

                                    if (column.key == 'object_permissions_group') {

                                        if ($scope.options.permission_selected_entity == 'group') {

                                            var resultPermission = [];

                                            groupedItem[entityAttrs[e].key].forEach(function (permission) {
                                                if (permission.group == $scope.options.permission_selected_id) {
                                                    if (permission.permission.indexOf('change') == 0) {
                                                        resultPermission.push('Change');
                                                    }
                                                    if (permission.permission.indexOf('manage') == 0) {
                                                        resultPermission.push('Manage');
                                                    }
                                                }
                                            });

                                            return resultPermission.join(', ');
                                        }
                                    }

                                    if (groupedItem[entityAttrs[e].key] && groupedItem[entityAttrs[e].key].length >= 1) {
                                        return '[' + groupedItem[entityAttrs[e].key].length + ']'
                                    }
                                } else {

                                    if (groupedItem[entityAttrs[e].key] !== null && groupedItem[entityAttrs[e].key] !== undefined) {

                                        if (column.value_type == 20 || column.value_type == 'float') {


                                            if (options && options.hasOwnProperty('reportItem')) {
                                                if (options.reportItem.isFirstOfFolded && options.reportItem.isFirstOfFolded == true) {
                                                    //console.log(options);
                                                    return options.reportItem.subTotal[entityAttrs[e].key].toFixed(2) + '';
                                                } else {
                                                    return groupedItem[entityAttrs[e].key].toFixed(2) + '';
                                                }
                                            } else {
                                                return groupedItem[entityAttrs[e].key].toFixed(2) + '';
                                            }
                                        } else {

                                            if (entityType == 'complex-transaction') {
                                                if (entityAttrs[e].key == 'status') {
                                                    if (groupedItem[entityAttrs[e].key] == 1) {
                                                        return 'Production';
                                                    }
                                                    if (groupedItem[entityAttrs[e].key] == 2) {
                                                        return 'Pending';
                                                    }
                                                }
                                            }


                                            return groupedItem[entityAttrs[e].key];
                                        }
                                    }
                                }
                            }
                        }
                    }


                    for (c = 0; c < $scope.columns.length; c = c + 1) {

                        var column_source = $scope.columns[c];

                        if (column_source.hasOwnProperty('key')) {

                            if (column_source.key == column.key) {
                                return groupedItem[column_source.key];
                            }
                        }

                    }
                }
            };

            $scope.bindCellTitle = function (item, column) {

                var result = '';

                if (item && item.hasOwnProperty(column.key)) {
                    if (column['value_type'] === 'mc_field') {
                        result = '[' + item[column.key].length + ']';
                    }
                    else {
                        result = item[column.key];
                    }
                }

                return result;
            };

            $scope.rowCallback = function (item, ev) {
                //console.log('open additions!', item);
                $scope.options.editorEntityId = item.id;
                var itemHasSimpleSelect = false;
                if (item.simpleSelect) {
                    itemHasSimpleSelect = JSON.parse(JSON.stringify(item.simpleSelect));
                }

                //console.log('$scope.itemAdditionsEditorEntityId', itemHasSimpleSelect);

                $scope.items.forEach(function (item) {
                    if (item.hasOwnProperty('groups')) {
                        item.simpleSelect = false;
                        item.items.forEach(function (row) {
                            row.simpleSelect = false;
                        })
                    } else {
                        item.simpleSelect = false;
                    }
                });

                item.simpleSelect = !item.simpleSelect;

                if (itemHasSimpleSelect == true) {
                    item.simpleSelect = false;
                    $scope.options.editorEntityId = undefined;
                }

                $scope.externalCallback({
                    silent: true,
                    redraw: false,
                    options: {editorEntityId: $scope.options.editorEntityId}
                });

                //if (localStorage.getItem('entityIsChanged') === "true") { // wow such shitcode
                //    $mdDialog.show({
                //        controller: 'WarningDialogController as vm',
                //        templateUrl: 'views/warning-dialog-view.html',
                //        parent: angular.element(document.body),
                //        targetEvent: ev,
                //        clickOutsideToClose: true,
                //        locals: {
                //            warning: {
                //                title: 'Warning',
                //                description: 'Unsaved data will be lost'
                //            }
                //        }
                //    }).then(function (res) {
                //        if (res.status === 'agree') {
                //            $scope.itemAdditionsEditorEntityId = item.id;
                //            localStorage.setItem('entityIsChanged', false);
                //        }
                //    });
                //} else {
                //    $scope.itemAdditionsEditorEntityId = item.id;
                //    //localStorage.setItem('entityIsChanged', false);
                //}
            };

            $scope.getAlign = function (column) {

                switch (column['value_type']) {
                    case 20:
                        return 'cell-right-align';
                        break;
                    case 'float':
                        return 'cell-right-align';
                        break;
                    case 40:
                        return 'cell-center-align';
                        break;
                    default:
                        return '';
                        break;
                }
            };

            $scope.deleteEntity = function (ev, entity) {

                $mdDialog.show({
                    controller: 'EntityViewerDeleteDialogController as vm',
                    templateUrl: 'views/entity-viewer/entity-viewer-entity-delete-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    //clickOutsideToClose: true,
                    locals: {
                        entity: entity,
                        entityType: $scope.entityType
                    }
                }).then(function (res) {
                    if (res.status === 'agree') {
                        $scope.externalCallback();
                    }
                })
            };

            $scope.editEntity = function (ev, entity) {
                $mdDialog.show({
                    controller: 'EntityViewerEditDialogController as vm',
                    templateUrl: 'views/entity-viewer/entity-viewer-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    //clickOutsideToClose: true,
                    locals: {
                        parent$scope: $scope,
                        entityId: entity.id
                    }
                }).then(function (res) {
                    if (res && res.res === 'agree') {
                        $scope.externalCallback();
                    }
                });
            };

            $scope.changePage = function (page) {
                $scope.externalCallback({options: {paginationPageCurrent: page}});
            };

            this.$onInit = function () {

                setTimeout(function () {

                    $scope.$watch('options.lastUpdate', function () {
                        syncGroupsAndColumns();

                        if ($scope.grouping_type == 'area') {
                            $scope.reportItems = groupTableReportService.transformItems(groupTableService.projection())
                        }
                    });


                }, 0)

            }

        }
    }

}());
},{"../../services/groupTableReportService":18,"../../services/groupTableService":19}],6:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    module.exports = {
        templateUrl: 'app/components/tableShellComponent/table-shell-component.html',
        controllerAs: 'vm',
        controller: function ($scope) {

            var vm = this;

            $scope.options = $scope.$parent.vm.options;
            $scope.items = $scope.$parent.vm.items;

            $scope.findSelectedFeature = function () {
                var selected = {isOpened: false, templateUrl: ''};
                //console.log('additionsStatus', $scope.additionsStatus);
                $scope.options.additionsStatus.extraFeatures.forEach(function (item) {
                    if (item.isOpened == true) {
                        selected = item;
                    }
                });
                //console.log(selected);

                return selected;
            };

            $scope.triggerResize = function () {

            };

            if ($scope.options.isRootEntityViewer == true) {

                $scope.$watch('options.editorEntityId', function (event, data) {

                    $scope.$broadcast('rootEditorEntityIdDown', {
                        editorEntityId: $scope.options.editorEntityId,
                        entityType: $scope.options.entityType
                    });
                });
            }

            $scope.checkAdditions = function () {
                if ($scope.options.additionsState == true && $scope.options.isRootEntityViewer == true && $scope.options.components.splitPanel == true) {
                    return true;
                }
                return false;
            }

        }
    }

}());
},{}],7:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var entityService = require('../../services/entityService');

    module.exports = function ($scope, ptDialog, data) {

        var vm = this;
        vm.readyStatus = {content: false};

        vm.tabs = [];

        console.log('data', data);

        vm.entityAttrs = [];

        vm.tabAttrsReady = false;

        // end refactore

        var parentScope = data.parent$scope;
        var callback = data.callback;

        var columns = parentScope.columns;
        var currentColumnsWidth = parentScope.columns.length;
        var filters = parentScope.filters;
        var grouping = parentScope.grouping;

        var attrsList = [];

        $('body').addClass('drag-dialog'); // hide backdrop
        vm.getAttributes = function () {

            vm.entities = entityService.getEntities();

            console.log('vm.entities', vm.entities);

            vm.readyStatus.content = true;

            syncAttrs();

        };


        parentScope.$watch('options.columns', function () {
            if (vm.tabAttrsReady) {
                columns = parentScope.options.columns;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.filters', function () {
            if (vm.tabAttrsReady) {
                filters = parentScope.options.filters;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.grouping', function () {
            if (vm.tabAttrsReady) {
                grouping = parentScope.options.grouping;
                syncAttrs();
                callback({silent: true});
            }
        });

        var syncAttrs = function () {
            syncTypeAttrs();
        };

        var updateAttrs = function () {

            updateTypeAttrs();

            addColumn();

        };

        function syncTypeAttrs() {

            vm.entities.forEach(function (entity) {
                var i;

                var attrs = entity.attributes;

                for (i = 0; i < attrs.length; i = i + 1) {
                    attrs[i].columns = false;
                    attrs[i].filters = false;
                    attrs[i].groups = false;
                    columns.map(function (item) {
                        //console.log('item', item);
                        //console.log('attrs[i]', attrs[i]);
                        if (attrs[i].name === item.name) {
                            attrs[i].columns = true;
                        }
                        return item;
                    });
                    filters.map(function (item) {
                        if (attrs[i].name === item.name) {
                            attrs[i].filters = true;
                        }
                        return item;
                    });
                    grouping.map(function (item) {
                        if (item.hasOwnProperty('key')) {
                            if (attrs[i].key === item.key) {
                                attrs[i].groups = true;
                            }
                        } else {
                            if (attrs[i].name === item.name) {
                                attrs[i].groups = true;
                            }
                        }
                        return item;
                    });
                }
            })
        }

        function updateTypeAttrs() {
            var i, c, g, f;
            var columnExist, groupExist, filterExist;

            vm.entities.forEach(function (entity) {
                var i;

                var typeAttrs = entity.attributes;


                for (i = 0; i < typeAttrs.length; i = i + 1) {
                    columnExist = false;
                    groupExist = false;
                    filterExist = false;
                    for (c = 0; c < columns.length; c = c + 1) {
                        if (typeAttrs[i].hasOwnProperty('key')) {
                            if (typeAttrs[i].key === columns[c].key) {
                                columnExist = true;
                                if (typeAttrs[i].columns === false) {
                                    columns.splice(c, 1);
                                    c = c - 1;
                                }
                            }
                        } else {
                            if (typeAttrs[i].name === columns[c].name) {
                                columnExist = true;
                                if (typeAttrs[i].columns === false) {
                                    columns.splice(c, 1);
                                    c = c - 1;
                                }
                            }
                        }
                    }
                    if (!columnExist) {
                        if (typeAttrs[i].columns === true) {
                            columns.push(typeAttrs[i]);
                        }
                    }

                    /////// GROUPING

                    for (g = 0; g < grouping.length; g = g + 1) {
                        if (typeAttrs[i].hasOwnProperty('key')) {
                            if (typeAttrs[i].key === grouping[g].key) {
                                groupExist = true;
                                if (typeAttrs[i].groups === false) {
                                    grouping.splice(g, 1);
                                    g = g - 1;
                                }
                            }
                        } else {
                            if (typeAttrs[i].id === grouping[g].id) {
                                groupExist = true;
                                if (typeAttrs[i].groups === false) {
                                    grouping.splice(g, 1);
                                    g = g - 1;
                                }
                            }
                        }
                    }
                    if (!groupExist) {
                        if (typeAttrs[i].groups === true) {
                            grouping.push(typeAttrs[i]);
                        }
                    }

                    /////// FILTERING

                    for (f = 0; f < filters.length; f = f + 1) {
                        if (typeAttrs[i].hasOwnProperty('key')) {
                            if (typeAttrs[i].key === filters[f].key) {
                                filterExist = true;
                                if (typeAttrs[i].filters === false) {
                                    filters.splice(f, 1);
                                    f = f - 1;
                                }
                            }
                        } else {
                            if (typeAttrs[i].name === filters[f].name) {
                                filterExist = true;
                                if (typeAttrs[i].filters === false) {
                                    filters.splice(f, 1);
                                    f = f - 1;
                                }
                            }
                        }
                    }
                    if (!filterExist) {
                        if (typeAttrs[i].filters === true) {
                            filters.push(typeAttrs[i]);
                        }
                    }

                }
            });

            // console.log('attributes in modal ', vm.attrs, vm.baseAttrs, vm.entityAttrs, parentScope);
        }

        vm.updateAttrs = function () {
            updateAttrs();
            callback({silent: true});
        };

        vm.cancel = function () {
            $('body').removeClass('drag-dialog');
            ptDialog.cancel();
        };

        var dragAndDrop = {

            init: function () {
                this.dragula();
                this.eventListeners();
            },

            eventListeners: function () {
                var that = this;
                var exist = false;
                this.dragula.on('over', function (elem, container, source) {
                    $(container).addClass('active');
                    $(container).on('mouseleave', function () {
                        $(this).removeClass('active');
                    })

                });
                this.dragula.on('drop', function (elem, target) {
                    //console.log('here?', target); //TODO fallback to ids instead of name/key
                    $(target).removeClass('active');
                    var name = $(elem).html();
                    var i;

                    //console.log('elem111111111111111111111111111111', elem);
                    //console.log('columns111111111111111111111111111111', columns);
                    //console.log('grouping111111111111111111111111111111', grouping);
                    //console.log('filters111111111111111111111111111111', filters);

                    exist = false;
                    if (target === document.querySelector('#columnsbag')) {
                        for (i = 0; i < columns.length; i = i + 1) {
                            if (columns[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#groupsbag')) {
                        for (i = 0; i < grouping.length; i = i + 1) {
                            if (grouping[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#filtersbag .drop-new-filter')) {
                        for (i = 0; i < filters.length; i = i + 1) {
                            if (filters[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (!exist) {
                        var a;
                        if (target === document.querySelector('#columnsbag')) {
                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    columns.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#groupsbag')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    grouping.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#filtersbag .drop-new-filter')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    filters.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        $scope.$apply();
                    }
                    $scope.$apply();
                });

                this.dragula.on('dragend', function (el) {
                    $scope.$apply();
                    $(el).remove();
                })
            },

            dragula: function () {
                var items = [document.querySelector('#columnsbag'), document.querySelector('#groupsbag'), document.querySelector('#filtersbag .drop-new-filter')];
                var i;
                var itemsElem = document.querySelectorAll('#dialogbag .g-modal-draggable-card');
                for (i = 0; i < itemsElem.length; i = i + 1) {
                    items.push(itemsElem[i]);
                }

                this.dragula = dragula(items,
                    {
                        copy: true
                    });
            }
        };

        var addColumn = function () {
            //if (currentColumnsWidth < columns.length) {
            //    metaService.columnsWidthGroups(true);
            //}
            //else {
            //    metaService.columnsWidthGroups(false);
            //}
        };

        vm.getAttributes();

        //setTimeout(function () {
        //    //dragAndDrop.init()
        //}, 500);
    }

}());
},{"../../services/entityService":15}],8:[function(require,module,exports){
/**
 * Created by szhitenev on 13.03.2017.
 */
(function () {

    'use strict';

    var metaService = require('../../services/metaService');

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {
                columns: "="
            },
            link: function ($scope, elem, attr) {

                var groups = {
                    "groupOne": "400px",
                    "groupTwo": "600px",
                    "groupThree": "300px",
                    "groupFour": "450px",
                    "groupFive": "200px",
                    "newColumnAdded": false
                };

                function columnsWidthGroups(newColumn) {

                    if (typeof newColumn === "boolean") {
                        groups["newColumnAdded"] = newColumn;
                    }
                    else {
                        return groups;
                    }
                };

                var groupsWidth = columnsWidthGroups();
                var setDefaultWidth = function () {
                    if (groupsWidth['newColumnAdded']) {
                        var columns = elem.find('.g-column');
                        var lastColumn = columns.length - 1;
                        var newColumn = columns[lastColumn];
                        var columnWidth;
                        columnWidth = '300px';
                        //switch ($scope.columns[lastColumn]["value_type"]) {
                        //    case 10:
                        //        columnWidth = groupsWidth.groupThree;
                        //        break;
                        //    case 20:
                        //    case 40:
                        //        columnWidth = groupsWidth.groupFive;
                        //        break;
                        //    case 30:
                        //        columnWidth = groupsWidth.groupOne;
                        //        break;
                        //}
                        $(newColumn).width(columnWidth);
                    }
                };

                $scope.$watchCollection('columns', function () {
                    setDefaultWidth();
                });
            }
        }
    }
}());
},{"../../services/metaService":21}],9:[function(require,module,exports){
/**
 * Created by sergey on 11.05.16.
 */
(function () {

    'use strict';

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {
                //items: '=',
                //options: '='
            },
            link: function (scope, elem, attr) {

                scope.options = scope.$parent.options;
                scope.items = scope.$parent.items;
                scope.columnsWidth = scope.options.columnsWidth;

                var minWidth = 65;	// width value for showing tooltip
                function toggleColumnNameTooltip(column, columnWidth) {
                    if (columnWidth <= minWidth && !column.hasClass('small-width')) {
                        column.addClass('small-width');
                    }
                    else if (columnWidth > minWidth && column.hasClass('small-width')) {
                        column.removeClass('small-width');
                    }
                }

                var columnsWidthSet = false;

                function setColumnsWidthAndNameTooltip() {
                    if (!columnsWidthSet) {
                        var columns = elem.find('.g-column');
                        var savedWidths = scope.columnsWidth;
                        //console.log('setColumnsWidthAndNameTooltip changes');
                        if (columns.length > 0 && columns.length === savedWidths.length) {
                            for (var i = 0; i < columns.length; i = i + 1) {
                                if (savedWidths[i] && !isNaN(savedWidths[i])) {
                                    $(columns[i]).width(savedWidths[i]);
                                    // if width small enough, show tooltip
                                    if (savedWidths[i] <= minWidth) {
                                        $(columns[i]).addClass('small-width');
                                    }
                                }
                            }
                            columnsWidthSet = true;
                        }
                    }
                }


                setTimeout(function () {

                    var workAreaElem = elem.parents('.g-workarea-wrap');

                    workAreaElem.width($(elem).parents('party-table').parent().width() - $(elem).parents('.g-wrapper').find('.g-filter-sidebar.main-sidebar').width());

                    var wrapperWidth = $('.g-columns-component.g-thead').width() - $('.g-cell-select.all').width();

                    //console.log('--------------------', wrapperWidth);
                    //console.log('--------------------', $(elem).parents('.g-table-section').width());

                    if (wrapperWidth < $(elem).parents('.g-table-section').width()) {
                        wrapperWidth = $(elem).parents('.g-table-section').width();
                        $(elem).width(wrapperWidth);
                    }

                    $(elem).find('.g-scroll-wrapper').width(wrapperWidth);
                    $(elem).find('.g-scrollable-area').width(wrapperWidth);

                }, 0);

                var resizeWorkarea = function () {
                    var workAreaElem = elem.parents('.g-workarea-wrap');
                    workAreaElem.width($(elem).parents('party-table').parent().width() - $(elem).parents('.g-wrapper').find('.g-filter-sidebar.main-sidebar').width());
                    var wrapperWidth = $(elem).find('.g-columns-component.g-thead').width() - $(elem).find('.g-cell-select.all').width();
                    $(elem).find('.g-scroll-wrapper').width(wrapperWidth);
                    $(elem).find('.g-scrollable-area').width(wrapperWidth);

                    resizeScrollableArea();
                    resize();
                };

                scope.$parent.triggerResize = resize;

                $(window).on('resize', function () {
                    resizeWorkarea();
                });

                $('.filter-area-size-btn').click(function () {
                    //console.log('filter toggle working');
                    var filterArea = $(elem).parents('.g-wrapper').find('.g-filter-sidebar.main-sidebar');
                    if (filterArea.hasClass('min-filter')) {
                        filterArea.attr({
                            'min-width': '20px',
                            'width': '20px'
                        });
                        resizeWorkarea();
                        filterArea.addClass('min-filter');
                    }
                    else {
                        filterArea.attr({
                            'min-width': '239px',
                            'width': '235px'
                        });
                        resizeWorkarea();
                        filterArea.removeClass('min-filter');
                    }
                });

                function resizeScrollableArea() {
                    var columns;
                    var i;
                    var areaWidth = 0;
                    var columnMargins = 16;
                    var dropNewFieldWidth = 400;
                    columns = elem.find('.g-column');

                    for (i = 0; i < columns.length; i = i + 1) {
                        areaWidth = areaWidth + $(columns[i]).width() + columnMargins;
                    }
                    var wrapperWidth = $(elem).find('.g-columns-component.g-thead').width() - $(elem).find('.g-cell-select.all').width();
                    if (wrapperWidth < areaWidth + dropNewFieldWidth) {
                        $(elem).find('.g-scrollable-area').width(areaWidth + dropNewFieldWidth);
                        $(elem).width(areaWidth + dropNewFieldWidth + 24);
                    } else {
                        //$(elem).width(wrapperWidth);
                    }
                }

                function resize() {

                    //console.log('resize!!');

                    var tHead = $(elem).find('.g-thead');
                    var th = tHead.find('.g-cell');
                    var tr = $(elem).find('.g-row');
                    var thSliders = th.find('.resize-slider');
                    var td;

                    var setThMinWidths = function () {
                        var i, a;
                        // var lastColumn = th.length - 1;
                        // console.log('min width seted ', th.length, 'resizer columns ', [scope.columns]);
                        for (i = 0; i < th.length; i = i + 1) {
                            if (!$(th[i]).attr('min-width')) {
                                $(th[i]).attr('min-width', '20');
                            }
                        }
                    };
                    setThMinWidths();

                    $(thSliders).bind('mousedown', function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        var parent = $(this).parents('.pt-card.g-cell.g-column');
                        var width = parent.width();
                        var minWidth = parent.attr('min-width');
                        var newWidth;
                        var mouseDownLeft = e.clientX;

                        $(window).bind('mousemove', function (e) {
                            newWidth = e.clientX - mouseDownLeft;
                            resizeScrollableArea();
                            resizeCells();
                            //resizeScrollableArea();
                            parent.width(width + newWidth);
                            if (newWidth + width > minWidth) {
                                parent.width(width + newWidth);
                            }
                            toggleColumnNameTooltip(parent, parent.width());

                        });
                        $(window).bind('mouseup', function () {
                            $(window).unbind('mousemove');
                        });
                    });

                    function resizeCells() {
                        var tHead = $(elem).find('.g-thead');
                        var th = tHead.find('.g-cell');
                        var tr = $(elem).find('.g-row');

                        var i, x;
                        for (i = 0; i < tr.length; i = i + 1) {
                            td = $(tr[i]).find('.g-cell-wrap');
                            for (x = 0; x < th.length; x = x + 1) {
                                (function (x) {
                                    $(td[x]).css({width: $(th[x]).width() + 'px'});
                                    //console.log('cell widths is ', $(td[x]).width(), $(th[x]).width());
                                }(x))
                            }
                        }
                    }

                    setTimeout(function () {
                        resizeCells();
                    }, 100);

                    //console.log('th', th);
                }

                scope.$watchCollection('items', function () {

                    resizeScrollableArea();

                    resize();

                    setColumnsWidthAndNameTooltip();
                });

                setTimeout(function () {
                    resize(); //TODO REFACTOR
                }, 400)


            }
        }
    }

}());
},{}],10:[function(require,module,exports){
/**
 * Created by szhitenev on 14.03.2017.
 */
(function () {

    'use strict';

    module.exports = function () {
        return {
            restrict: 'A',
            link: function (scope, elem, attrs) {

                var dragger = $(elem).find('.pt-drag-target');

                var parent = $(elem);

                var posY = 0, posX = 0;
                var elemLeft = 0, elemTop = 0;
                var initMouseX = 0, initMouseY = 0;

                function mousemove(e) {

                    posX = e.pageX;
                    posY = e.pageY;

                    parent[0].style.left = (posX + elemLeft - initMouseX) + 'px';
                    parent[0].style.top = (posY + elemTop - initMouseY) + 'px';
                }

                dragger.bind('mousedown', function (e) {

                    e.preventDefault();
                    e.stopPropagation();

                    initMouseX = e.clientX;
                    initMouseY = e.clientY;

                    elemLeft = parent[0].offsetLeft;
                    elemTop = parent[0].offsetTop;

                    $(window).bind('mousemove', mousemove);

                    $(window).bind('mouseup', function (e) {
                        //console.log('unbind');
                        $(window).unbind('mousemove');
                    });

                    return false;
                })
            }
        }
    }

}());
},{}],11:[function(require,module,exports){
/**
 * Created by szhitenev on 14.03.2017.
 */
(function () {

    'use strict';

    module.exports = function () {
        return {
            restrict: 'A',
            link: function ($scope, $elem, $attrs) {

                $elem.find('a.pt-icon-button').on('click', function () {
                    $elem.find('.pt-dropdown-content').addClass('active');

                    $(document).bind('click touchstart', function (e) {

                        if (!$elem.find('.pt-dropdown-content').is(e.target) &&
                            (!$elem.find('.pt-dropdown-content').find(e.target).length) && !$elem.find('a.pt-icon-button').is(e.target) &&
                            (!$elem.find('a.pt-icon-button').find(e.target).length)
                        ) {
                            hideDropdown();
                            $(document).unbind('click touchstart');
                        }
                    });

                });

                function hideDropdown() {
                    $elem.find('.pt-dropdown-content').removeClass('active');
                }


            }
        }
    }

}())
},{}],12:[function(require,module,exports){
/**
 * Created by szhitenev on 02.11.2016.
 */
(function () {

    'use strict';

    module.exports = function () {
        return {
            restrict: 'AE',
            transclude: true,
            templateUrl: 'app/directives/groupBindAreaRowDirective/group-bind-area-row-directive.html',
            link: function (scope, elem, attrs) {

                //console.log('scope.item', scope.item);


            }
        }
    }

}());
},{}],13:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    "use strict";

    var getMenu = function () {
        return window.fetch("portal/content/json/menu.json").then(function (data) {
            return data.json();
        });
    };

    var getBaseAttrs = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            }
        ];
    };


    // DEPRECATED start look at metaRestrictionRepository

    var getEntitiesWithoutBaseAttrsList = function () {
        return ['price-history', 'currency-history', 'transaction',
            'complex-transaction', 'transaction-report', 'cash-flow-projection-report', 'performance-report',
            'balance-report', 'pnl-report', 'audit-transaction', 'audit-instrument'];
    };

    // DEPRECATED end look at metaRestrictionRepository

    var getEntitiesWithoutDynAttrsList = function () {
        return ['price-history', 'currency-history', 'transaction', 'pricing-policy', 'strategy-1', 'strategy-2', 'strategy-3',
            'strategy-1-group', 'strategy-2-group', 'strategy-3-group',
            'strategy-1-subgroup', 'strategy-2-subgroup', 'strategy-3-subgroup',
            'audit-transaction', 'audit-instrument'];
    };

    var getEntityAttrs = function (entity) {
        var entityAttrs = {
            "portfolio": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "accounts",
                    "name": "Accounts",
                    "value_type": "mc_field"

                },
                {
                    "key": "responsibles",
                    "name": "Responsibles",
                    "value_type": "mc_field"
                },
                {
                    "key": "counterparties",
                    "name": "Counterparties",
                    "value_type": "mc_field"
                },
                {
                    "key": "transaction_types",
                    "name": "Transaction types",
                    "value_type": "mc_field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "audit-transaction": [
                {
                    "key": "date_formatted",
                    "name": "Date",
                    "value_type": 10
                },
                {
                    "key": "username",
                    "name": "Member",
                    "value_type": 10
                },
                {
                    "key": "field_name",
                    "name": "Field",
                    "value_type": 10
                },
                {
                    "key": "old_value",
                    "name": "Old value",
                    "value_type": 10
                },
                {
                    "key": "value",
                    "name": "New value",
                    "value_type": 10
                },
                {
                    "key": "message",
                    "name": "Message",
                    "value_type": 10
                }
            ],
            "audit-instrument": [
                {
                    "key": "date_formatted",
                    "name": "Date",
                    "value_type": 10
                },
                {
                    "key": "username",
                    "name": "Member",
                    "value_type": 10
                },
                {
                    "key": "field_name",
                    "name": "Field",
                    "value_type": 10
                },
                {
                    "key": "old_value",
                    "name": "Old value",
                    "value_type": 10
                },
                {
                    "key": "value",
                    "name": "New value",
                    "value_type": 10
                },
                {
                    "key": "message",
                    "name": "Message",
                    "value_type": 10
                }
            ],
            "account": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "portfolios",
                    "name": "Portfolios",
                    "value_type": "mc_field"

                },
                {
                    "key": "type",
                    "name": "Type",
                    "value_type": "field"
                },
                {
                    "key": "public_name",
                    "name": "Public name",
                    "value_type": 10
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "tag": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "public_name",
                    "name": "Public name",
                    "value_type": 10
                },
                {
                    "key": "content_types",
                    "name": "Content Types",
                    "value_type": 'mc_field'
                }
            ],
            "account-type": [
                {
                    "key": "public_name",
                    "name": "Public name",
                    "value_type": 10
                },
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "show_transaction_details",
                    "name": "Show transaction details",
                    "value_type": "boolean"
                },
                {
                    "key": "transaction_details_expr",
                    "name": "Transaction details expr",
                    "value_type": 10
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "counterparty": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "group",
                    "name": "Group",
                    "value_type": "field"
                },
                {
                    "key": "portfolios",
                    "name": "Portfolios",
                    "value_type": "mc_field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "counterparty-group": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "public_name",
                    "name": "Public name",
                    "value_type": 10
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "responsible": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "group",
                    "name": "Group",
                    "value_type": "field"
                },
                {
                    "key": "portfolios",
                    "name": "Portfolios",
                    "value_type": "mc_field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "responsible-group": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "public_name",
                    "name": "Public name",
                    "value_type": 10
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "pricing-policy": [
                {
                    "key": "expr",
                    "name": "Expression",
                    "value_type": 10
                },
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                }
            ],
            "instrument-type": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "public_name",
                    "name": "Public name",
                    "value_type": 10
                },
                {
                    "key": "is_active",
                    "name": "Is active",
                    "value_type": "boolean"
                },
                {
                    "key": "instrument_class",
                    "name": "Instrument class",
                    "value_type": "field"
                },
                {
                    "key": "one_off_event",
                    "name": "One off event",
                    "value_type": "field"
                },
                {
                    "key": "regular_event",
                    "name": "Regular event",
                    "value_type": "field"
                },
                {
                    "key": "factor_same",
                    "name": "Factor same",
                    "value_type": "field"
                },
                {
                    "key": "factor_up",
                    "name": "Factor up",
                    "value_type": "field"
                },
                {
                    "key": "factor_down",
                    "name": "Factor down",
                    "value_type": "field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "instrument": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "instrument_type",
                    "name": "Instrument type",
                    "value_type": "field"
                },
                {
                    "key": "is_active",
                    "name": "Is active",
                    "value_type": "boolean"
                },
                {
                    "key": "reference_for_pricing",
                    "name": "Reference for pricing",
                    "value_type": 10
                },
                {
                    "key": "price_download_scheme",
                    "name": "Price download scheme",
                    "value_type": "field"
                },
                {
                    "key": "pricing_currency",
                    "name": "Pricing currency",
                    "value_type": "field"
                },
                {
                    "key": "price_multiplier",
                    "name": "Price multiplier",
                    "value_type": "float"
                },
                {
                    "key": "accrued_currency",
                    "name": "Accrued currency",
                    "value_type": "field"
                },
                {
                    "key": "maturity_date",
                    "name": "Maturity date",
                    "value_type": 40
                },
                {
                    "key": "accrued_multiplier",
                    "name": "Accrued multiplier",
                    "value_type": "float"
                },
                {
                    "key": "daily_pricing_model",
                    "name": "Daily pricing model",
                    "value_type": "field"
                },
                {
                    "key": "payment_size_detail",
                    "name": "Payment size detail",
                    "value_type": "field"
                },
                {
                    "key": "default_price",
                    "name": "Default price",
                    "value_type": "float"
                },
                {
                    "key": "default_accrued",
                    "name": "Default accrued",
                    "value_type": "float"
                },
                {
                    "key": "user_text_1",
                    "name": "User text 1",
                    "value_type": 10
                },
                {
                    "key": "user_text_2",
                    "name": "User text 2",
                    "value_type": 10
                },
                {
                    "key": "user_text_3",
                    "name": "User text 3",
                    "value_type": 10
                },
                {
                    "key": "object_permissions_user",
                    "name": "Users permissions",
                    "value_type": "mc_field"
                },
                {
                    "key": "object_permissions_group",
                    "name": "Groups permissions",
                    "value_type": "mc_field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "transaction": [
                {
                    "key": "transaction_code",
                    "name": "Transaction Code",
                    "value_type": 20
                },
                {
                    "key": "transaction_class",
                    "name": "Transaction class",
                    "value_type": "field"
                },
                {
                    "key": "portfolio",
                    "name": "Portfolio",
                    "value_type": "field"
                },
                {
                    "key": "transaction_currency",
                    "name": "Transaction currency",
                    "value_type": "field"
                },
                {
                    "key": "instrument",
                    "name": "Instrument",
                    "value_type": "field"
                },
                {
                    "key": "position_size_with_sign",
                    "name": "Position Size with sign",
                    "value_type": "float"
                },
                {
                    "key": "settlement_currency",
                    "name": "Settlement currency",
                    "value_type": "field"
                },
                {
                    "key": "cash_consideration",
                    "name": "Cash consideration",
                    "value_type": "float"
                },
                {
                    "key": "principal_with_sign",
                    "name": "Principal with sign",
                    "value_type": "float"
                },
                {
                    "key": "carry_with_sign",
                    "name": "Carry with sign",
                    "value_type": "float"
                },
                {
                    "key": "overheads_with_sign",
                    "name": "Overheads with sign",
                    "value_type": "float"
                },
                {
                    "key": "accounting_date",
                    "name": "Accounting date",
                    "value_type": 40
                },
                {
                    "key": "cash_date",
                    "name": "Cash date",
                    "value_type": 40
                },
                //{
                //    "key": "transaction_date",
                //    "name": "Transaction date",
                //    "value_type": 40
                //},
                {
                    "key": "account_cash",
                    "name": "Account cash",
                    "value_type": 'field'
                },
                {
                    "key": "account_position",
                    "name": "Account position",
                    "value_type": 'field'
                },
                {
                    "key": "account_interim",
                    "name": "Account interim",
                    "value_type": 'field'
                },
                {
                    "key": "strategy1_position",
                    "name": "Strategy1 position",
                    "value_type": 'field'
                },
                {
                    "key": "strategy1_cash",
                    "name": "Strategy1 cash",
                    "value_type": 'field'
                },
                {
                    "key": "strategy2_position",
                    "name": "Strategy2 position",
                    "value_type": 'field'
                },
                {
                    "key": "strategy2_cash",
                    "name": "Strategy2 cash",
                    "value_type": 'field'
                },
                {
                    "key": "strategy3_position",
                    "name": "Strategy3 position",
                    "value_type": 'field'
                },
                {
                    "key": "strategy3_cash",
                    "name": "Strategy3 cash",
                    "value_type": 'field'
                },
                {
                    "key": "reference_fx_rate",
                    "name": "Reference fx rate",
                    "value_type": 'float'
                },
                {
                    "key": "is_locked",
                    "name": "Is locked",
                    "value_type": 'boolean'
                },
                {
                    "key": "is_canceled",
                    "name": "Is canceled",
                    "value_type": 'boolean'
                },
                {
                    "key": "factor",
                    "name": "Factor",
                    "value_type": 'float'
                },
                {
                    "key": "principal_amount",
                    "name": "Principal amount",
                    "value_type": 'float'
                },
                {
                    "key": "carry_amount",
                    "name": "Carry amount",
                    "value_type": 'float'
                },
                {
                    "key": "overheads",
                    "name": "overheads",
                    "value_type": 'float'
                },
                {
                    "key": "responsible",
                    "name": "Responsible",
                    "value_type": 'field'
                },
                {
                    "key": "counterparty",
                    "name": "Counterparty",
                    "value_type": 'field'
                }
            ],
            "transaction-type-group": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "public_name",
                    "name": "Public name",
                    "value_type": 10
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "transaction-type": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "group",
                    "name": "Group",
                    "value_type": "field"
                },
                {
                    "key": "display_expr",
                    "name": "Display Expression",
                    "value_type": 10
                },
                {
                    "key": "instrument_types",
                    "name": "Instrument types",
                    "value_type": "mc_field"
                },
                {
                    "key": "portfolios",
                    "name": "Portfolios",
                    "value_type": "mc_field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "currency": [
                {
                    "key": "reference_for_pricing",
                    "name": "Reference for pricing",
                    "value_type": 10
                },
                {
                    "key": "daily_pricing_model",
                    "name": "Daily pricing model",
                    "value_type": "field"
                },
                {
                    "key": "price_download_scheme",
                    "name": "Price download scheme",
                    "value_type": "field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "currency-history": [
                {
                    "key": "currency",
                    "name": "Currency",
                    "value_type": "field"
                },
                {
                    "key": "date",
                    "name": "Date",
                    "value_type": 40
                },
                {
                    "key": "fx_rate",
                    "name": "Fx rate",
                    "value_type": "float"
                },
                {
                    "key": "pricing_policy",
                    "name": "Pricing policy",
                    "value_type": "field"
                }
                //{
                //    "key": "fx_rate_expr",
                //    "name": "fx_rate_expr",
                //    "value_type": 10
                //}
            ],
            "price-history": [
                {
                    "key": "instrument",
                    "name": "Instrument",
                    "value_type": "field"
                },
                {
                    "key": "date",
                    "name": "Date",
                    "value_type": 40
                },
                {
                    "key": "pricing_policy",
                    "name": "Pricing policy",
                    "value_type": "field"
                },
                {
                    "key": "principal_price",
                    "name": "Principal price",
                    "value_type": "float"
                },
                {
                    "key": "accrued_price",
                    "name": "Accrued price",
                    "value_type": "float"
                }
                //{
                //    "key": "factor",
                //    "name": "Factor",
                //    "value_type": "float"
                //}
            ],
            "strategy-1": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "subgroup",
                    "name": "Sub Group",
                    "value_type": "field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "strategy-2": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "subgroup",
                    "name": "Sub Group",
                    "value_type": "field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "strategy-3": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "subgroup",
                    "name": "Sub Group",
                    "value_type": "field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "strategy-1-subgroup": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "group",
                    "name": "Group",
                    "value_type": "field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "strategy-2-subgroup": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "group",
                    "name": "Group",
                    "value_type": "field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "strategy-3-subgroup": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "group",
                    "name": "Group",
                    "value_type": "field"
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "strategy-1-group": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "strategy-2-group": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "strategy-3-group": [
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "tags",
                    "name": "Tags",
                    "value_type": "mc_field"
                }
            ],
            "balance-report": [
                //{
                //    "key": "name",
                //    "name": "Name",
                //    "value_type": 10
                //},
                //{
                //    "key": "short_name",
                //    "name": "Short name",
                //    "value_type": 10
                //},
                //{
                //    "key": "user_code",
                //    "name": "User code",
                //    "value_type": 10
                //},
                //{
                //    "key": "last_notes",
                //    "name": "Last notes",
                //    "value_type": 10
                //},
                //{
                //    "key": "account",
                //    "name": "Account",
                //    "value_type": "field"
                //},
                //{
                //    "key": "instrument",
                //    "name": "Instrument",
                //    "value_type": "field"
                //},
                //{
                //    "key": "currency",
                //    "name": "Currency",
                //    "value_type": "field"
                //},
                //{
                //    "key": "portfolio",
                //    "name": "Portfolio",
                //    "value_type": "field"
                //},
                //{
                //    "key": "strategy-1",
                //    "name": "Strategy 1",
                //    "value_type": "field"
                //},
                //{
                //    "key": "strategy-2",
                //    "name": "Strategy 2",
                //    "value_type": "field"
                //},
                //{
                //    "key": "strategy-3",
                //    "name": "Strategy 3",
                //    "value_type": "field"
                //},
                {
                    "key": "position_size",
                    "name": "Position size",
                    "value_type": "float"
                },
                {
                    "key": "pricing_currency",
                    "name": "Pricing",
                    "value_type": "float"
                },
                {
                    "key": "instrument_principal",
                    "name": "Current Price",
                    "value_type": "float"
                },
                {
                    "key": "instrument_accrued",
                    "name": "Current Accrued",
                    "value_type": "float"
                },
                {
                    "key": "instrument_pricing_currency_fx_rate",
                    "name": "Pricing currency fx rate",
                    "value_type": "float"
                },
                {
                    "key": "instrument_accrued_currency_fx_rate",
                    "name": "Accrued currency FX rate",
                    "value_type": "float"
                },

                {
                    "key": "instrument_accrual_object_accrual_size",
                    "name": "Current Payment Size",
                    "value_type": "float"
                },
                {
                    "key": "instrument_accrual_object_periodicity_object_name",
                    "name": "Current Payment Frequency",
                    "value_type": "float"
                },
                {
                    "key": "instrument_accrual_object_periodicity_n",
                    "name": "Current Payment Periodicity N",
                    "value_type": "float"
                },


                //{
                //    "key": "report_currency_fx_rate",
                //    "name": "Report currency fx rate",
                //    "value_type": "float"
                //},
                //{
                //    "key": "instrument_price_history_principal_price",
                //    "name": "Instrument price history principal price",
                //    "value_type": "float"
                //},
                //{
                //    "key": "instrument_price_history_accrued_price",
                //    "name": "Instrument price history accrued price",
                //    "value_type": "float"
                //},
                //{
                //    "key": "instrument_pricing_currency_fx_rate",
                //    "name": "Instrument pricing currency fx rate",
                //    "value_type": "float"
                //},
                //{
                //    "key": "instrument_accrued_currency_fx_rate",
                //    "name": "Instrument accrued currency fx rate",
                //    "value_type": "float"
                //},
                //{
                //    "key": "currency_fx_rate",
                //    "name": "Currency fx rate",
                //    "value_type": "float"
                //},


                {
                    "key": "date",
                    "name": "Date",
                    "value_type": 40
                },
                {
                    "key": "ytm",
                    "name": "YTM",
                    "value_type": "float"
                },
                {
                    "key": "modified_duration",
                    "name": "Modified duration",
                    "value_type": "float"
                },

                {
                    "key": "last_notes",
                    "name": "Last notes",
                    "value_type": 10
                },
                //{
                //    "key": "gross_cost_price",
                //    "name": "Gross cost price",
                //    "value_type": "float"
                //},
                {
                    "key": "gross_cost_price_loc",
                    "name": "Gross cost price (LOC)",
                    "value_type": "float"
                },
                {
                    "key": "ytm_at_cost",
                    "name": "YTM at cost",
                    "value_type": "float"
                },
                {
                    "key": "time_invested",
                    "name": "Time invested",
                    "value_type": "float"
                },
                //{
                //    "key": "net_cost_price",
                //    "name": "Net cost price",
                //    "value_type": "float"
                //},
                {
                    "key": "net_cost_price_loc",
                    "name": "Net cost price (LOC)",
                    "value_type": "float"
                },
                //{
                //    "key": "report_currency_history",
                //    "name": "Report currency history",
                //    "value_type": "field"
                //},
                //{
                //    "key": "instrument_price_history",
                //    "name": "Instrument price history",
                //    "value_type": "field"
                //},
                //{
                //    "key": "instrument_pricing_currency_history",
                //    "name": "Instrument pricing currency history",
                //    "value_type": "field"
                //},
                //{
                //    "key": "instrument_accrued_currency_history",
                //    "name": "Instrument accrued currency history",
                //    "value_type": "field"
                //},
                //{
                //    "key": "currency_history",
                //    "name": "Currency history",
                //    "value_type": "field"
                //},
                //{
                //    "key": "pricing_currency_history",
                //    "name": "Pricing currency history",
                //    "value_type": "field"
                //},
                //{
                //    "key": "instrument_accrual",
                //    "name": "Instrument accrual",
                //    "value_type": "field"
                //},
                //{
                //    "key": "instrument_accrual_accrued_price",
                //    "name": "Instrument accrual accrued price",
                //    "value_type": "field"
                //},

                {
                    "key": "principal_invested",
                    "name": "Principal invested",
                    "value_type": "float"
                },
                {
                    "key": "principal_invested_loc",
                    "name": "Principal invested (LOC)",
                    "value_type": "float"
                },
                {
                    "key": "amount_invested",
                    "name": "Amount invested",
                    "value_type": "float"
                },
                {
                    "key": "amount_invested_loc",
                    "name": "Amount invested (LOC)",
                    "value_type": "float"
                },

                {
                    "key": "market_value",
                    "name": "Market value",
                    "value_type": "float"
                },
                {
                    "key": "market_value_loc",
                    "name": "Market value (LOC)",
                    "value_type": "float"
                },
                {
                    "key": "market_value_percent",
                    "name": "Market value %",
                    "value_type": "float"
                },
                {
                    "key": "exposure",
                    "name": "Exposure",
                    "value_type": "float"
                },
                {
                    "key": "exposure_percent",
                    "name": "Exposure %",
                    "value_type": "float"
                },
                {
                    "key": "exposure_loc",
                    "name": "Exposure (LOC)",
                    "value_type": "float"
                }
            ],
            'report-addon-performance': [
                {
                    "key": "instrument_principal",
                    "name": "Opened Principal",
                    "value_type": "float"
                },
                {
                    "key": "instrument_accrued",
                    "name": "Opened Carry",
                    "value_type": "float"
                },
                {
                    "key": "net_position_return",
                    "name": "Net position return",
                    "value_type": "float"
                },
                {
                    "key": "net_position_return_loc",
                    "name": "Net position return (LOC)",
                    "value_type": "float"
                },
                {
                    "key": "position_return",
                    "name": "Position return",
                    "value_type": "float"
                },
                {
                    "key": "position_return_loc",
                    "name": "Position return (LOC)",
                    "value_type": "float"
                },
                {
                    "key": "daily_price_change",
                    "name": "Daily price change",
                    "value_type": "float"
                },
                {
                    "key": "mtd_price_change",
                    "name": "MTD price change",
                    "value_type": "float"
                },

            ],
            "pnl-report": [
                {
                    "key": "name",
                    "name": "Name",
                    "value_type": 10
                },
                {
                    "key": "short_name",
                    "name": "Short Name",
                    "value_type": 10
                },
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "account",
                    "name": "Account",
                    "value_type": "field"
                },
                {
                    "key": "instrument",
                    "name": "Instrument",
                    "value_type": "field"
                },
                {
                    "key": "currency",
                    "name": "Currency",
                    "value_type": "field"
                },
                {
                    "key": "portfolio",
                    "name": "Portfolio",
                    "value_type": "field"
                },
                {
                    "key": "strategy-1",
                    "name": "Strategy 1",
                    "value_type": "field"
                },
                {
                    "key": "strategy-2",
                    "name": "Strategy 2",
                    "value_type": "field"
                },
                {
                    "key": "strategy-3",
                    "name": "Strategy 3",
                    "value_type": "field"
                },
                {
                    "key": "carry",
                    "name": "Carry",
                    "value_type": "float"
                },
                {
                    "key": "carry_closed",
                    "name": "Carry closed",
                    "value_type": "float"
                },
                {
                    "key": "carry_fixed",
                    "name": "Carry fixed",
                    "value_type": "float"
                },
                {
                    "key": "carry_fixed_closed",
                    "name": "Carry fixed closed",
                    "value_type": "float"
                },
                {
                    "key": "carry_fixed_opened",
                    "name": "Carry fixed opened",
                    "value_type": "float"
                },
                {
                    "key": "carry_fx",
                    "name": "Carry FX",
                    "value_type": "float"
                },
                {
                    "key": "carry_fx_closed",
                    "name": "Carry FX closed",
                    "value_type": "float"
                },
                {
                    "key": "carry_fx_opened",
                    "name": "Carry FX opened",
                    "value_type": "float"
                },
                {
                    "key": "carry_opened",
                    "name": "Carry opened",
                    "value_type": "float"
                },
                {
                    "key": "overheads",
                    "name": "Overheads",
                    "value_type": "float"
                },
                {
                    "key": "overheads_closed",
                    "name": "Overheads closed",
                    "value_type": "float"
                },
                {
                    "key": "overheads_fixed",
                    "name": "Overheads fixed",
                    "value_type": "float"
                },
                {
                    "key": "overheads_fixed_closed",
                    "name": "Overheads fixed closed",
                    "value_type": "float"
                },
                {
                    "key": "overheads_fixed_opened",
                    "name": "Overheads fixed opened",
                    "value_type": "float"
                },
                {
                    "key": "overheads_fx",
                    "name": "Overheads FX",
                    "value_type": "float"
                },
                {
                    "key": "overheads_fx_closed",
                    "name": "Overheads FX closed",
                    "value_type": "float"
                },
                {
                    "key": "overheads_fx_opened",
                    "name": "Overheads FX opened",
                    "value_type": "float"
                },
                {
                    "key": "overheads_opened",
                    "name": "Overheads opened",
                    "value_type": "float"
                },
                {
                    "key": "principal",
                    "name": "Principal",
                    "value_type": "float"
                },
                {
                    "key": "principal_closed",
                    "name": "Principal closed",
                    "value_type": "float"
                },
                {
                    "key": "principal_fixed",
                    "name": "Principal fixed",
                    "value_type": "float"
                },
                {
                    "key": "principal_fixed_closed",
                    "name": "Principal fixed closed",
                    "value_type": "float"
                },
                {
                    "key": "principal_fixed_opened",
                    "name": "Principal fixed opened",
                    "value_type": "float"
                },
                {
                    "key": "principal_fx",
                    "name": "Principal FX",
                    "value_type": "float"
                },
                {
                    "key": "principal_fx_closed",
                    "name": "Principal FX closed",
                    "value_type": "float"
                },
                {
                    "key": "principal_fx_opened",
                    "name": "Principal FX opened",
                    "value_type": "float"
                },
                {
                    "key": "principal_opened",
                    "name": "Principal opened",
                    "value_type": "float"
                },
                {
                    "key": "total",
                    "name": "Total",
                    "value_type": "float"
                },
                {
                    "key": "total_closed",
                    "name": "Total closed",
                    "value_type": "float"
                },
                {
                    "key": "total_fixed",
                    "name": "Total fixed",
                    "value_type": "float"
                },
                {
                    "key": "total_fixed_closed",
                    "name": "Total fixed closed",
                    "value_type": "float"
                },
                {
                    "key": "total_fixed_opened",
                    "name": "Total fixed opened",
                    "value_type": "float"
                },
                {
                    "key": "total_fx",
                    "name": "Total FX",
                    "value_type": "float"
                },
                {
                    "key": "total_fx_closed",
                    "name": "Total FX closed",
                    "value_type": "float"
                },
                {
                    "key": "total_fx_opened",
                    "name": "Total FX opened",
                    "value_type": "float"
                },
                {
                    "key": "total_opened",
                    "name": "Total opened",
                    "value_type": "float"
                },
                {
                    "key": "total_real",
                    "name": "Total real",
                    "value_type": "float"
                },
                {
                    "key": "total_unreal",
                    "name": "Total unreal",
                    "value_type": "float"
                },
                {
                    "key": "market_value",
                    "name": "Market value",
                    "value_type": "float"
                },
                {
                    "key": "exposure",
                    "name": "Exposure",
                    "value_type": "float"
                },
                {
                    "key": "market_value_percent",
                    "name": "Market value %",
                    "value_type": "float"
                },
                {
                    "key": "exposure_percent",
                    "name": "Exposure %",
                    "value_type": "float"
                }
            ],
            "transaction-report": [
                {
                    "key": "account_cash",
                    "name": "Account cash",
                    "value_type": "field"
                },
                {
                    "key": "account_interim",
                    "name": "Account interim",
                    "value_type": "field"
                },
                {
                    "key": "account_position",
                    "name": "Account position",
                    "value_type": "field"
                },
                {
                    "key": "account_date",
                    "name": "Account date",
                    "value_type": 40
                },
                {
                    "key": "allocation_balance",
                    "name": "Allocation balance", // link to instrument
                    "value_type": "field"
                },
                {
                    "key": "allocation_pl",
                    "name": "Allocation pl", // link to instrument
                    "value_type": "field"
                },
                {
                    "key": "carry_with_sign",
                    "name": "Carry with sign",
                    "value_type": "float"
                },
                {
                    "key": "cash_consideration",
                    "name": "Cash consideration",
                    "value_type": "float"
                },
                {
                    "key": "cash_date",
                    "name": "Cash date",
                    "value_type": 40
                },
                {
                    "key": "complex-transaction",
                    "name": "Complex transaction",
                    "value_type": "field"
                },
                {
                    "key": "counterparty",
                    "name": "Counterparty",
                    "value_type": "field"
                },
                {
                    "key": "instrument",
                    "name": "Instrument",
                    "value_type": "field"
                },
                {
                    "key": "linked_instrument",
                    "name": "Linked Instrument",
                    "value_type": "field"
                },
                {
                    "key": "overheads_with_sign",
                    "name": "Overheads with sign",
                    "value_type": "float"
                },
                {
                    "key": "portfolio",
                    "name": "Portfolio",
                    "value_type": "field"
                },
                {
                    "key": "principal_with_sign",
                    "name": "Principal with sign",
                    "value_type": "float"
                },
                {
                    "key": "reference_fx_rate",
                    "name": "Reference fx rate",
                    "value_type": "float"
                },
                {
                    "key": "responsible",
                    "name": "Responsible",
                    "value_type": "field"
                },
                {
                    "key": "settlement_currency",
                    "name": "Settlement currency",
                    "value_type": "field"
                },
                {
                    "key": "strategy1_cash",
                    "name": "Strategy 1 cash",
                    "value_type": "field"
                },
                {
                    "key": "strategy1_position",
                    "name": "Strategy 1 position",
                    "value_type": "field"
                },
                {
                    "key": "strategy2_cash",
                    "name": "Strategy 2 cash",
                    "value_type": "field"
                },
                {
                    "key": "strategy2_position",
                    "name": "Strategy 2 position",
                    "value_type": "field"
                },
                {
                    "key": "strategy3_cash",
                    "name": "Strategy 3 cash",
                    "value_type": "field"
                },
                {
                    "key": "strategy3_position",
                    "name": "Strategy 3 position",
                    "value_type": "field"
                },
                {
                    "key": "transaction_class",
                    "name": "Transaction class",
                    "value_type": "field"
                },
                {
                    "key": "transaction_code",
                    "name": "Transaction code",
                    "value_type": "float"
                },
                {
                    "key": "transaction_currency",
                    "name": "Transaction currency",
                    "value_type": "field"
                },
                {
                    "key": "transaction_date",
                    "name": "Transaction date",
                    "value_type": 40
                }
            ],
            "cash-flow-projection-report": [
                {
                    "key": "account_cash",
                    "name": "Account cash",
                    "value_type": "field"
                },
                {
                    "key": "account_interim",
                    "name": "Account interim",
                    "value_type": "field"
                },
                {
                    "key": "account_position",
                    "name": "Account position",
                    "value_type": "field"
                },
                {
                    "key": "allocation_balance",
                    "name": "Allocation balance", // link to instrument
                    "value_type": "field"
                },
                {
                    "key": "allocation_pl",
                    "name": "Allocation pl", // link to instrument
                    "value_type": "field"
                },
                {
                    "key": "carry_with_sign",
                    "name": "Carry with sign",
                    "value_type": "float"
                },
                {
                    "key": "cash_consideration",
                    "name": "Cash consideration",
                    "value_type": "float"
                },
                {
                    "key": "cash_consideration_after",
                    "name": "Cash consideration after",
                    "value_type": "float"
                },
                {
                    "key": "cash_consideration_before",
                    "name": "Cash consideration before",
                    "value_type": "float"
                },
                {
                    "key": "cash_date",
                    "name": "Cash date",
                    "value_type": 40
                },
                {
                    "key": "complex-transaction",
                    "name": "Complex transaction",
                    "value_type": "field"
                },
                {
                    "key": "counterparty",
                    "name": "Counterparty",
                    "value_type": "field"
                },
                {
                    "key": "instrument",
                    "name": "Instrument",
                    "value_type": "field"
                },
                {
                    "key": "linked_instrument",
                    "name": "Linked Instrument",
                    "value_type": "field"
                },
                {
                    "key": "overheads_with_sign",
                    "name": "Overheads with sign",
                    "value_type": "float"
                },
                {
                    "key": "portfolio",
                    "name": "Portfolio",
                    "value_type": "field"
                },
                {
                    "key": "reference_fx_rate",
                    "name": "Reference fx rate",
                    "value_type": "float"
                },
                {
                    "key": "responsible",
                    "name": "Responsible",
                    "value_type": "field"
                },
                {
                    "key": "settlement_currency",
                    "name": "Settlement currency",
                    "value_type": "field"
                },
                {
                    "key": "strategy1_cash",
                    "name": "Strategy 1 cash",
                    "value_type": "field"
                },
                {
                    "key": "strategy1_position",
                    "name": "Strategy 1 position",
                    "value_type": "field"
                },
                {
                    "key": "strategy2_cash",
                    "name": "Strategy 2 cash",
                    "value_type": "field"
                },
                {
                    "key": "strategy2_position",
                    "name": "Strategy 2 position",
                    "value_type": "field"
                },
                {
                    "key": "strategy3_cash",
                    "name": "Strategy 3 cash",
                    "value_type": "field"
                },
                {
                    "key": "strategy3_position",
                    "name": "Strategy 3 position",
                    "value_type": "field"
                },
                {
                    "key": "transaction_class",
                    "name": "Transaction class",
                    "value_type": "field"
                },
                {
                    "key": "transaction_code",
                    "name": "Transaction code",
                    "value_type": "float"
                },
                {
                    "key": "transaction_currency",
                    "name": "Transaction currency",
                    "value_type": "field"
                },
                {
                    "key": "transaction_date",
                    "name": "Transaction date",
                    "value_type": 40
                }
            ],
            "performance-report": [
                {
                    "key": "name",
                    "name": "Name",
                    "value_type": 10
                },
                {
                    "key": "short_name",
                    "name": "Short name",
                    "value_type": 10
                },
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "account",
                    "name": "Account",
                    "value_type": "field"
                },
                {
                    "key": "instrument",
                    "name": "Instrument",
                    "value_type": "field"
                },
                {
                    "key": "currency",
                    "name": "Currency",
                    "value_type": "field"
                },
                {
                    "key": "portfolio",
                    "name": "Portfolio",
                    "value_type": "field"
                },
                {
                    "key": "strategy-1",
                    "name": "Strategy 1",
                    "value_type": "field"
                },
                {
                    "key": "strategy-2",
                    "name": "Strategy 2",
                    "value_type": "field"
                },
                {
                    "key": "strategy-3",
                    "name": "Strategy 3",
                    "value_type": "field"
                },
                {
                    "key": "position_size",
                    "name": "Position size",
                    "value_type": "float"
                },
                {
                    "key": "market_value",
                    "name": "Market value",
                    "value_type": "float"
                },
                {
                    "key": "exposure",
                    "name": "Exposure",
                    "value_type": "float"
                },
                {
                    "key": "market_value_percent",
                    "name": "Market value %",
                    "value_type": "float"
                },
                {
                    "key": "exposure_percent",
                    "name": "Exposure %",
                    "value_type": "float"
                }
            ],
            "complex-transaction": [
                {
                    "key": "code",
                    "name": "Code",
                    "value_type": "float"
                },
                {
                    "key": "status",
                    "name": "Status",
                    "value_type": 10 // actually field
                },
                {
                    "key": "text",
                    "name": "Description",
                    "value_type": 10
                }
            ],
            "instrument-scheme": [
                {
                    key: 'reference_for_pricing',
                    name: 'Reference for pricing',
                    "value_type": 10
                },
                {
                    key: 'factor_schedule_method',
                    name: 'Factor schedule method',
                    type: 'field'
                },
                {
                    key: 'accrual_calculation_schedule_method',
                    name: 'Accrual calculation schedule method',
                    type: 'field'
                },
                {
                    "key": "user_code",
                    "name": "User code",
                    "value_type": 10
                },
                {
                    "key": "public_name",
                    "name": "Public name",
                    "value_type": 10
                },
                {
                    "key": "instrument_type",
                    "name": "Instrument type",
                    "value_type": 10
                },
                {
                    "key": "pricing_currency",
                    "name": "Pricing currency",
                    "value_type": 10
                },
                {
                    "key": "price_multiplier",
                    "name": "Price multiplier",
                    "value_type": 10
                },
                {
                    "key": "accrued_currency",
                    "name": "Accrued currency",
                    "value_type": 10
                },
                {
                    "key": "accrued_multiplier",
                    "name": "Accrued multiplier",
                    "value_type": 10
                },
                {
                    "key": "user_text_1",
                    "name": "User text 1",
                    "value_type": 10
                },
                {
                    "key": "user_text_2",
                    "name": "User text 2",
                    "value_type": 10
                },
                {
                    "key": "user_text_3",
                    "name": "User text 3",
                    "value_type": 10
                },
                {
                    "key": "maturity_date",
                    "name": "Maturity date",
                    "value_type": 10
                },
                {
                    "key": "payment_size_detail",
                    "name": "Payment size detail",
                    "value_type": 'field'
                },
                {
                    "key": "daily_pricing_model",
                    "name": "Daily pricing model",
                    "value_type": 'field'
                },
                {
                    "key": "price_download_scheme",
                    "name": "Price download scheme",
                    "value_type": 'field'
                },
                {
                    "key": "default_price",
                    "name": "Default price",
                    "value_type": 10
                },
                {
                    "key": "default_accrued",
                    "name": "Default accrued",
                    "value_type": 10
                }
            ]
        };

        return entityAttrs[entity];
    };

    var getValueTypes = function () {
        return [{
            "value": 20,
            "display_name": "Number"
        }, {
            "value": 10,
            "display_name": "String"
        }, {
            "value": 40,
            "display_name": "Date"
        }, {
            "value": 30,
            "display_name": "Classifier"
        }, {
            "value": "decoration",
            "display_name": "Decoration"
        }, {
            "value": "field",
            "display_name": "Field"
        }, {
            "value": "mc_field",
            "display_name": "Multiple choice field"
        }, {
            "value": "boolean",
            "display_name": "Boolean"
        }, {
            "value": "float",
            "display_name": "Float"
        }
        ];
    };

    var getDynamicAttrsValueTypes = function () {
        return [
            {
                "value": 20,
                "display_name": "Number"
            }, {
                "value": 10,
                "display_name": "String"
            }, {
                "value": 40,
                "display_name": "Date"
            }, {
                "value": 30,
                "display_name": "Classifier"
            }
        ]
    };

    var getRestrictedEntitiesWithTypeField = function () {
        return ['daily_pricing_model', 'payment_size_detail', 'accrued_currency', 'pricing_currency'];
    };

    var getEntityTabs = function (entityType) {
        switch (entityType) {
            case 'instrument':
                return [
                    {
                        label: 'Accruals',
                        templateUrl: 'views/tabs/instrument/accrual-calculation-schedules-view.html'
                    },
                    {
                        label: 'Events',
                        templateUrl: 'views/tabs/instrument/events-view.html'
                    },
                    {
                        label: 'Pricing',
                        templateUrl: 'views/tabs/instrument/manual-pricing-formulas-view.html'
                    },
                    {
                        label: 'Factors',
                        templateUrl: 'views/tabs/instrument/factor-schedule-view.html'
                    }
                ];
                break;
            case 'complex-transaction':
                return [
                    {
                        label: 'Actions',
                        templateUrl: 'views/tabs/complex-transaction/book-transaction-actions-tab-view.html'
                    },
                    {
                        enabled: ['update'],
                        label: 'Transactions',
                        templateUrl: 'views/tabs/complex-transaction/book-transaction-transactions-tab-view.html'
                    }
                ];

                break;
            case 'transaction-type':
                return [
                    {
                        label: 'General',
                        templateUrl: 'views/tabs/transaction-type/transaction-type-general-tab-view.html'
                    },
                    {
                        label: 'Inputs',
                        templateUrl: 'views/tabs/transaction-type/transaction-type-inputs-tab-view.html'
                    },
                    {
                        label: 'Actions',
                        templateUrl: 'views/tabs/transaction-type/transaction-type-actions-tab-view.html'
                    }
                ];
                break;
        }
    };

    var getEntitiesWithSimpleFields = function () {
        // e.g. both of responsible-group, counterparty group
        // have save property group, so its hard to resolve proper service
        return ["responsible", 'counterparty',
            'strategy-1', 'strategy-2', 'strategy-3',
            'transaction-type', 'transaction-type-group',
            'strategy-1-group', 'strategy-2-group', 'strategy-3-group',
            'strategy-1-subgroup', 'strategy-2-subgroup', 'strategy-3-subgroup']
    };

    var getFieldsWithTagGrouping = function () {
        return ['instrument_type', 'type', 'transaction_type', 'instrument_types', 'transaction_types', 'account_types'];
    };

    module.exports = {
        getMenu: getMenu,
        getBaseAttrs: getBaseAttrs,
        getEntityAttrs: getEntityAttrs,
        getValueTypes: getValueTypes,
        getDynamicAttrsValueTypes: getDynamicAttrsValueTypes,
        getEntitiesWithoutDynAttrsList: getEntitiesWithoutDynAttrsList,
        getEntityTabs: getEntityTabs,
        getEntitiesWithoutBaseAttrsList: getEntitiesWithoutBaseAttrsList,
        getRestrictedEntitiesWithTypeField: getRestrictedEntitiesWithTypeField,
        getEntitiesWithSimpleFields: getEntitiesWithSimpleFields,
        getFieldsWithTagGrouping: getFieldsWithTagGrouping
    }


}());
},{}],14:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    var reservedProps = ['id', 'url', 'tags', 'user_code'];

    var setColumns = function (items, columns) {
        // console.log('items in set columns is ', items);
        //var itemsColumned = items.map(function(item){
        //    var i, x, z;
        //    var keys = Object.keys(item);
        //    var saved;
        //    for(i = 0; i < keys.length; i = i + 1) {
        //        saved = false;
        //        for(x = 0; x < columns.length; x = x + 1) {
        //            for(z = 0; z < reservedProps.length; z = z + 1) {
        //                if(keys[i] === columns[x] || keys[i] == reservedProps[z]) {
        //                    saved = true
        //                }
        //            }
        //        }
        //        if(!saved) {
        //            delete item[keys[i]];
        //        }
        //    }
        //    return item;
        //});
        //return itemsColumned;
        return items;
    };

    module.exports = {
        setColumns: setColumns
    }

}());
},{}],15:[function(require,module,exports){
/**
 * Created by szhitenev on 13.03.2017.
 */
(function () {

    'use strict';

    var entities = [];

    var setEntities = function (_entities) {
        entities = _entities;
    };

    var getEntities = function (entity) {
        if (entity) {
            if (typeof entity == 'string') {
                return entities[entity];
            }
        }

        return entities

    };

    module.exports = {
        setEntities: setEntities,
        getEntities: getEntities
    }

}());
},{}],16:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    var setFilters = function (items, filters) {

        if (filters.length) {
            var itemsFiltered = [];

            var i, f, item, filter, accepted = true;

            for (i = 0; i < items.length; i = i + 1) {
                item = items[i];
                accepted = true;
                for (f = 0; f < filters.length; f = f + 1) {
                    filter = filters[f];
                    if(!filter.options) {
                        filter.options = {enabled: true, query: ''};
                    }
                    if (filter.options.enabled) {
                        if(filter.options.query) {
                            if(filter.key) {
                                if (item[filter.key].toString().toLocaleLowerCase().indexOf(filter.options.query.toLocaleLowerCase()) == -1) {
                                    accepted = false;
                                }
                            } else {
                                if (item[filter.name].toString().toLocaleLowerCase().indexOf(filter.options.query.toLocaleLowerCase()) == -1) {
                                    accepted = false;
                                }
                            }
                        }
                    }
                }
                if(accepted) {
                    itemsFiltered.push(item);
                }
            }
            return itemsFiltered;
        } else {
            return items;
        }
    };

    module.exports = {
        setFilters: setFilters
    }

}());
},{}],17:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function () {

    'use strict';

    var setFolds = function (items, folding) {
        var i;
        for (i = 0; i < items.length; i = i + 1) {
            items[i].isFolded = folding;
        }
        //console.log('FOLDED', items);
        return items;
    };

    module.exports = {
        setFolds: setFolds
    }

}());
},{}],18:[function(require,module,exports){
/**
 * Created by szhitenev on 02.11.2016.
 */
(function () {

    'use strict';

    function Row(options) {
        this.type = options.type || 'normal'; // header row, subtotal row, normal row, breadcrumbs, init, preinit
        this.cellsCaptions = options.cellsCaptions || []; // captions for groups
        this.value = options.value; // casual val, or subtotal
        this.subTotal = options.subTotal || {};
        this.isRootBootGroup = options.isRootBootGroup || false;
        this.value_options = options.value_options || {};
    }

    function findPreviousGroupsByAncestor(item) {

        var groups = [];

        function findDataInAncestor(ancestorItem) {

            groups.push({
                groups: ancestorItem.groups,
                items: ancestorItem.items,
                level: ancestorItem.level
            });

            if (ancestorItem.hasOwnProperty('_ancestor')) {
                findDataInAncestor(ancestorItem._ancestor);
            }

        }

        if (item.hasOwnProperty('_ancestor')) {
            findDataInAncestor(item._ancestor);
        }

        return groups;

    }

    function findCellCaptions(item, level, type, options) {

        var rowType = type || 'normal';

        var cellCaptions = [];
        var i;
        var cellObj;
        var previousGroups = [];

        if (rowType == 'subtotal') {

            if (options.reportSettingsType == 'area') {

                previousGroups = findPreviousGroupsByAncestor(item);


                //console.log('previousGroups', previousGroups);
                //console.log('item', item);
                if (item.groups.length) {

                    var cellObjType = 'area';

                    if (item.groups.length && item.groups[0].report_settings.subtotal_type) {
                        cellObjType = item.groups[0].report_settings.subtotal_type;
                    }


                    for (i = 0; i < level; i = i + 1) {

                        if (i == level - 1) {
                            cellObj = JSON.parse(JSON.stringify(item.groups[0]));
                            //cellObj._group = item.groups[0];
                            cellObj.comparePattern = item.groups[0].comparePattern;
                            cellObj.type = cellObjType;
                            cellObj.level = level;
                            cellObj.value = '<b>Subtotal</b>';
                        } else {
                            for (g = 0; g < previousGroups.length; g = g + 1) {

                                if (previousGroups[g].level == i) {

                                    cellObj = {};

                                    //console.log('previousGroups[g].items[0]', previousGroups[g].items[0]);
                                    //console.log('item.', item);

                                    if (previousGroups[g].items[0]._lid == item.items[0]._lid) {
                                        cellObj = JSON.parse(JSON.stringify(previousGroups[g].groups[0]));
                                    }


                                    //cellObj._group = previousGroups[g].groups[0];
                                    cellObj.comparePattern = previousGroups[g].groups[0].comparePattern;
                                    cellObj.type = cellObjType;
                                    cellObj.level = i + 1;
                                    cellObj.value = '';
                                }
                            }

                        }

                        cellCaptions.push(cellObj);

                    }

                }

                //for (i = 1; i <= level; i = i + 1) {
                //
                //
                //    cellObj = {
                //        value: '',
                //        //_group: item.groups[0],
                //        comparePattern: item.groups[0].comparePattern,
                //        type: item.groups[0].report_settings.subtotal_type,
                //        level: i
                //    };
                //
                //
                //    if (i == level) {
                //        cellObj.value = 'Subtotal';
                //        cellObj.level = level;
                //    }
                //
                //
                //    cellCaptions.push(cellObj);
                //
                //}
            } else {

                if (options.reportSettingsType == 'line') {
                    level = level - 1;

                    if (level > 0) {
                        for (i = 0; i <= level; i = i + 1) {

                            cellObj = {
                                value: '',
                                //_group: item.groups[0],
                                comparePattern: item.groups[0].comparePattern,
                                type: item.groups[0].report_settings.subtotal_type
                            };

                            if (i == level) {
                                cellObj.level = level + 1;
                            }

                            cellCaptions.push(cellObj);

                        }
                    }
                }
            }

        }

        if (rowType == 'breadcrumb') {


            previousGroups = findPreviousGroupsByAncestor(item);

            //console.log('BREACRUMB', item);

            var g;

            for (i = 0; i < level; i = i + 1) {

                if (i == level - 1) {
                    cellObj = item.groups[0];
                    cellObj.comparePattern = item.groups[0].comparePattern;
                    cellObj.type = 'area';
                    if (item.groups[0].report_settings) {
                        cellObj.type = item.groups[0].report_settings.subtotal_type;
                    }
                    cellObj.level = level;
                } else {
                    if (previousGroups.length) {
                        for (g = 0; g < previousGroups.length; g = g + 1) {

                            if (previousGroups[g].level == i) {
                                cellObj = previousGroups[g].groups[0];
                                cellObj.comparePattern = previousGroups[g].groups[0].comparePattern;
                                cellObj.type = previousGroups[g].groups[0].report_settings.subtotal_type;
                                cellObj.level = i + 1;
                            }
                        }
                    }

                }


                cellCaptions.push(cellObj);

                //console.log('cellCaptions', cellCaptions);

            }
        }

        if (rowType == 'normal') {

            //console.log('item', item);

            if (item.hasOwnProperty('breadcrumbs_level_0') && item.breadcrumbs_level_0.length && item.breadcrumbs_level_0[0].hasOwnProperty('groups')) {

                for (i = 1; i <= level; i = i + 1) {

                    var type = 'area';

                    if (item.groups[0].report_settings) {
                        type = item.groups[0].report_settings.subtotal_type;
                    }

                    cellObj = {
                        value: '',
                        comparePattern: item.groups[0].comparePattern,
                        //_group: item.groups[0],
                        subTotal: item.subTotal,
                        type: type,
                        level: i
                    };


                    if (i == level) {
                        cellObj.level = level;
                    }


                    cellCaptions.push(cellObj);

                }

            } else {

                previousGroups = findPreviousGroupsByAncestor(item);

                //console.log('previousGroups', previousGroups);
                //console.log('item', item);
                //console.log('options', options);
                if (item.groups.length) {

                    var cellObjType = 'area';

                    if (item.groups.length && item.groups[0].report_settings && item.groups[0].report_settings.subtotal_type) {
                        cellObjType = item.groups[0].report_settings.subtotal_type;
                    }


                    for (i = 0; i < level; i = i + 1) {

                        if (i == level - 1) {
                            cellObj = JSON.parse(JSON.stringify(item.groups[0]));
                            //cellObj._group = item.groups[0];
                            cellObj.comparePattern = item.groups[0].comparePattern;
                            cellObj.type = cellObjType;
                            cellObj.subTotal = item.groups[0].subTotal;
                            cellObj.level = level;
                            if (options.itemIndex != 0) {
                                cellObj.value = '';
                            }
                        } else {
                            for (g = 0; g < previousGroups.length; g = g + 1) {

                                if (previousGroups[g].level == i) {

                                    cellObj = {};

                                    //console.log('previousGroups[g].items[0]', previousGroups[g].items[0]);
                                    //console.log('item.', item);

                                    if (previousGroups[g].items[0]._lid == item.items[0]._lid) {
                                        cellObj = JSON.parse(JSON.stringify(previousGroups[g].groups[0]));
                                    }

                                    //console.log('previousGroups[g]', previousGroups[g]);

                                    //cellObj._group = previousGroups[g].groups[0];
                                    cellObj.comparePattern = previousGroups[g].groups[0].comparePattern;
                                    cellObj.type = cellObjType;
                                    cellObj.subTotal = previousGroups[g].groups[0].subTotal;
                                    cellObj.level = i + 1;
                                    //cellObj.itemIndex = options.itemIndex;

                                    if (options.itemIndex != 0) {
                                        cellObj.value = '';
                                    }
                                }
                            }

                        }

                        cellCaptions.push(cellObj);

                    }

                }
            }
        }

        return cellCaptions;

    }

    function findItemRecursive(items, level, resultItems) {

        //console.log('items', items);

        items.forEach(function (item) {

            var cellCaptions, obj;


            // If we don't have boot_level_0, so we are on the boot_level_0
            // and we don't have preInit breadcrumbs

            if (!item.hasOwnProperty('boot_level_' + level)) {
                if (level == 0) {
                    level = level + 1;
                }
            }

            // if item have top-line group subtotal start,

            if (item.hasOwnProperty('groups') && item.groups.length) {
                if (item.groups[0].report_settings && item.groups[0].report_settings.subtotal_type == 'line' && level !== 0) {

                    cellCaptions = findCellCaptions(item, level, 'subtotal', {reportSettingsType: 'line'});

                    obj = {
                        cellsCaptions: cellCaptions,
                        value: item.subTotal,
                        type: 'subtotal-line',
                        value_options: {
                            type: item.groups[0].report_settings.subtotal_type,
                            level: level
                        }
                    };

                    resultItems.push(new Row(obj));
                }
            }


            // if item have top-line group subtotal start end


            if (level == 0) {

                cellCaptions = findCellCaptions(item, level);

                obj = {
                    cellsCaptions: cellCaptions,
                    value: item.groups,
                    type: 'preinit',
                    value_options: {
                        level: level
                    }
                };

                resultItems.push(new Row(obj));
            }

            // if we have preInit groups end

            // go deeper

            if (item.hasOwnProperty('boot_level_' + level)) {

                findItemRecursive(item['boot_level_' + level], level + 1, resultItems);

            } else {

                // or if bootGroups.length == 1, bring just breadcrumbs lines

                //console.log('item', item);

                // TODO refactor breadcrumbs level?

                if (item.hasOwnProperty('breadcrumbs_level_0') && item['breadcrumbs_level_0'][0].items) {

                    //console.log("item['breadcrumbs_level_0']", item['breadcrumbs_level_0']);

                    item['breadcrumbs_level_0'].forEach(function (breadCrumbItem, breadcrumbIndex) {

                        var cellCaptions = findCellCaptions(item, level, 'breadcrumb', {inGroupIndex: breadcrumbIndex});

                        var breadcrumbObj = {
                            cellsCaptions: cellCaptions,
                            value: breadCrumbItem.groups,
                            type: 'breadcrumbs',
                            value_options: {
                                level: level
                            }
                        };

                        resultItems.push(new Row(breadcrumbObj));

                        breadCrumbItem.items.forEach(function (rowItem) {

                            var cellCaptions = findCellCaptions(item, level, 'normal');

                            var obj = {
                                cellsCaptions: cellCaptions,
                                value: rowItem,
                                subTotal: item.subTotal,
                                value_options: {
                                    level: level
                                }
                            };

                            resultItems.push(new Row(obj));

                        });
                    })

                } else {

                    if (item.hasOwnProperty('items') && item.items.length) {

                        item.items.forEach(function (rowItem, $itemIndex) {

                            var cellCaptions = findCellCaptions(item, level, 'normal', {itemIndex: $itemIndex});

                            var obj = {
                                cellsCaptions: cellCaptions,
                                value: rowItem,
                                subTotal: item.subTotal,
                                value_options: {
                                    level: level
                                }
                            };

                            resultItems.push(new Row(obj));

                        });
                    }
                }
            }

            // if group have area subtotal, do it, start

            //console.log('ITEM', item);

            //console.log('-------------------------------------------------------', item.groups[0]);

            if (item.hasOwnProperty('groups') && item.groups.length) {
                if (item.groups[0].report_settings && item.groups[0].report_settings.subtotal_type == 'area' && level !== 0) {

                    cellCaptions = findCellCaptions(item, level, 'subtotal', {reportSettingsType: 'area'});

                    obj = {
                        cellsCaptions: cellCaptions,
                        value: item.subTotal,
                        type: 'subtotal',
                        value_options: {
                            type: item.groups[0].report_settings.subtotal_type,
                            level: level
                        }
                    };

                    resultItems.push(new Row(obj));
                }
            }

            // if group have area subtotal, do it, end

        })

    }

    var transformItems = function (items) {

        //console.trace();

        var level = 0;
        var resultItems = [];

        findItemRecursive(items, level, resultItems);

        //console.log('result transformed', resultItems);

        return resultItems;
    };

    module.exports = {
        transformItems: transformItems
    }

}());
},{}],19:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    var groupingService = require('./groupingService');
    var filteringService = require('./filteringService');
    var sortingService = require('./sortingService');
    var columnsService = require('./columnsService');
    var foldingService = require('./foldingService');

    var columnsServiceExt = {
        setColumns: function (columns) {
            //console.log('setColumns', this.items);
            this.items = columnsService.setColumns(this.items, columns)
        }
    };

    var groupingServiceExt = {
        setGroups: function (groups, entityType) {
            this.items = groupingService.setGroups(this.items, groups, entityType);
        },
        setGroupsWithColumns: function (groups, columns, entityType) {
            this.items = groupingService.setGroupsWithColumns(this.items, groups, columns, entityType);
        }
    };

    var foldingServiceExt = {
        setFolds: function (folding) {
            this.items = foldingService.setFolds(this.items, folding);
        }
    };

    var filteringServiceExt = {
        setFilters: function (filters) {
            this.items = filteringService.setFilters(this.items, filters);
        }
    };

    var sortingServiceExt = {
        group: {
            sort: function (sort) {
                this.items = sortingService.group.sort(this.items, sort);
            }
        },
        column: {
            sort: function (sort) {
                this.items = sortingService.column.sort(this.items, sort);
            }
        }
    };


    // THAT IS AWFUL! // TODO make refactor someday

    function GroupTableService() {
        //console.log('instance created');
        var _this = this;
        this.setItems = function (itemsSource) {
            this.items = itemsSource;
        };
        this.columns = {
            setColumns: function (columns) {
                //console.log('setColumns', this.items);
                _this.items = columnsService.setColumns(_this.items, columns)
            }
        };
        this.grouping = {
            setGroups: function (groups, entityType) {
                console.log('this', _this);
                _this.items = groupingService.setGroups(_this.items, groups, entityType);
            },
            setGroupsWithColumns: function (groups, columns, entityType) {
                _this.items = groupingService.setGroupsWithColumns(_this.items, groups, columns, entityType);
            }
        };
        this.filtering = {
            setFilters: function (filters) {
                _this.items = filteringService.setFilters(_this.items, filters);
            }
        };
        this.folding = {
            setFolds: function (folding) {
                _this.items = foldingService.setFolds(_this.items, folding);
            }
        };
        this.sorting = {
            group: {
                sort: function (sort) {
                    _this.items = sortingService.group.sort(_this.items, sort);
                }
            },
            column: {
                sort: function (sort) {
                    _this.items = sortingService.column.sort(_this.items, sort);
                }
            }
        };
        this.projection = function () {
            return this.items;
        };

    }

    var instance;

    var getInstance = function (recreate) {

        if(recreate == true) {
            instance = new GroupTableService();
        }

        if(!instance) {
            instance = new GroupTableService();
        }
        return instance;
    };

    module.exports = {
        getInstance: getInstance
    }

}());
},{"./columnsService":14,"./filteringService":16,"./foldingService":17,"./groupingService":20,"./sortingService":24}],20:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    var reportSubtotalService = require('./reportSubtotalService');

    'use strict';

    function returnValue(attribute) {

        console.log('attribute', attribute);

        if (attribute['attribute_type_object'].value_type == 30) {
            return attribute['classifier']
        } else {
            if (attribute['attribute_type_object'].value_type == 40) {
                return attribute['value_date'];
            } else {
                if (attribute['attribute_type_object'].value_type == 20) {
                    return attribute['value_float'];
                } else {
                    if (attribute['attribute_type_object'].value_type == 10 && attribute['value_string'] !== '') {
                        return attribute['value_string'];
                    } else {
                        return null;
                    }
                }
            }
        }
    }

    function setAncestors(item, level, groupType, options) {

        if (groupType == 'boot') {

            item["boot_level_" + level].forEach(function (childItem) {

                var ancestor = JSON.parse(JSON.stringify(item));
                if (level > 0) {
                    ancestor.level = level - 1;
                } else {
                    ancestor.level = level;
                }

                delete ancestor["boot_level_" + level];

                childItem._ancestor = ancestor;

            })

        }

        if (groupType == 'breadcrumb') {

            item["breadcrumbs_level_" + level].forEach(function (childItem) {

                var ancestor = JSON.parse(JSON.stringify(item));

                delete ancestor["breadcrumbs_level_" + level];
                ancestor.level = options.bootLevel;

                childItem._ancestor = ancestor;

            })


        }

    };

    function returnValueType(attribute) {

        console.log('attribute', attribute);

        if (attribute['attribute_type_object'].value_type == 30) {
            return 'classifier'
        } else {
            if (attribute['attribute_type_object'].value_type == 40) {
                return 'value_date';
            } else {
                if (attribute['attribute_type_object'].value_type == 20) {
                    return 'value_float';
                } else {
                    if (attribute['attribute_type_object'].value_type == 10) {
                        return 'value_string';
                    } else {
                        return null;
                    }
                }
            }
        }
    }

    var transformToArray = function (groupedObject) {

        //console.log('groupedObject', groupedObject);
        var items = [];
        var i;
        var keys = Object.keys(groupedObject);
        for (i = 0; i < keys.length; i = i + 1) {
            items.push(groupedObject[keys[i]]);
        }
        //console.log('grooouping', items);
        return items;
    };

    var setGroups = function (items, groups, entityTypes, options) {

        //console.log('GROUPING SERVICE groups', groups);

        //console.log("items", items);

        var itemsGrouped = [];
        var itemsGroupedArray = [];
        var i, c, a, k;

        var baseAttrs = [];
        var entityAttrs = {};


        var keywords = [];

        entityTypes.forEach(function (entity) {
            entity.attributes.forEach(function (field) {
                keywords.push(field);
            })
        });

        var hasGroups = true;
        var groupName = '';
        var groupsForResult = [];

        function checkIfEmptyString(item) {
            if (item == '') {
                return null
            }
            return item;
        }

        function findGroupsForResult(group, item, attribute) {

            var resGroupItem;

            //console.log('keywords', keywords);
            for (k = 0; k < keywords.length; k = k + 1) {
                var n, nExist = false;
                if (group.key === keywords[k].key) {

                    //console.log('groupsForResult', groupsForResult);
                    for (n = 0; n < groupsForResult.length; n = n + 1) {
                        //console.log('groupsForResult[n]', groupsForResult[n]);
                        if (groupsForResult[n].comparePattern.indexOf('&[' + keywords[k].key + '}-{' + checkIfEmptyString(item[keywords[k].key]) + ']') !== -1) {
                            nExist = true;
                        }
                    }
                    if (!nExist) {

                        resGroupItem = {
                            comparePattern: '&[' + keywords[k].key + '}-{' + checkIfEmptyString(item[keywords[k].key]) + ']',
                            key: keywords[k].key.replace(' ', '_'),
                            value: checkIfEmptyString(item[keywords[k].key]),
                            value_type: keywords[k].value_type
                        };

                        if (group.hasOwnProperty('report_settings')) {
                            resGroupItem.report_settings = group.report_settings;
                        }

                        groupsForResult.push(resGroupItem);
                    }
                }
            }

        }

        if (groups.length) {
            var group, item;
            for (i = 0; i < items.length; i = i + 1) {
                item = items[i];
                groupsForResult = [];
                groupName = ''; // create groupName of each item
                //console.log('groups111111111111111111111111', groups);
                for (c = 0; c < groups.length; c = c + 1) {
                    //console.log('items[i]', items[i]);

                    group = groups[c];
                    //console.log('group[c]', group);
                    if (group.hasOwnProperty('key')) {

                        findGroupsForResult(group, item);
                        var keys = Object.keys(items[i]);
                        for (a = 0; a < keys.length; a = a + 1) {
                            if (groupName.indexOf('&[' + checkIfEmptyString(group.key) + '}-{' + checkIfEmptyString(item[group.key]) + ']') === -1) {
                                groupName = groupName + '&[' + checkIfEmptyString(group.key) + '}-{' + checkIfEmptyString(item[group.key]) + ']';
                            }
                        }

                    }

                }
                //console.log('groupName', groupName);

                if (!itemsGrouped[groupName]) {
                    itemsGrouped[groupName] = {
                        groups: groupsForResult,
                        items: []
                    }
                }
                itemsGrouped[groupName].items.push(item);
                //console.log('itemsGrouped[groupName]', itemsGrouped[groupName]);
                //console.log('itemsGrouped', itemsGrouped);
                itemsGroupedArray = transformToArray(itemsGrouped);
            }

            //console.log('------------------------');

            //console.log('Items grouped', itemsGroupedArray);

            if (options) {

                itemsGroupedArray.forEach(function (group) {

                    //console.log('group122222', group);
                    group.subTotal = reportSubtotalService.calcColumnSubTotal(group, options.columns);
                    group.groups[0].subTotal = group.subTotal;
                });
            }

            //console.log('Items grouped', itemsGroupedArray);


            return itemsGroupedArray;
        } else {
            //console.log('items', items);
            return items;
        }
    };

    function isInt(value) {
        if (isNaN(value)) {
            return false;
        }
        var x = parseFloat(value);
        return (x | 0) === x;
    }


    // deprecated start
    function setProperty(path, obj, value) {
        var schema = obj;
        var pList = path.split('.');
        var len = pList.length;
        for (var i = 0; i < len - 1; i++) {
            var elem = pList[i];
            if (!schema[elem]) schema[elem] = {};
            schema = schema[elem];
        }

        schema[pList[len - 1]] = value;
    }

    function getProperty(object, path) {
        var o = object;
        path = path.replace(/\[(\w+)\]/g, '.$1');
        path = path.replace(/^\./, '');
        var a = path.split('.');
        while (a.length) {
            var n = a.shift();
            if (n in o) {
                o = o[n];
            } else {
                return;
            }
        }
        return o;
    }

    // deprecated end

    function recursiveFillGroups(items, groups, entityTypes, options) {

        var level = 0;
        var results = [];

        function recursiveWalker(items, groups, entityTypes, level, options) {

            //console.log('options', options);
            //console.log('level', level);

            var setGroupOptions = {
                columns: options.columns
            };

            if (options.boot == true) {

                if (groups.bootsGroup[level]) {

                    if (!results.length) {

                        var tempResults = setGroups(items, [groups.bootsGroup[level]], entityTypes, setGroupOptions);

                        tempResults.forEach(function (item) {

                            results.push(item);
                        });

                        recursiveWalker(results, groups, entityTypes, level + 1, options)

                    } else {

                        items.forEach(function (resultItem) {


                            resultItem['boot_level_' + level] = setGroups(resultItem.items, [groups.bootsGroup[level]], entityTypes, setGroupOptions);

                            setAncestors(resultItem, level, 'boot');

                            if (groups.bootsGroup[level + 1]) {
                                recursiveWalker(resultItem['boot_level_' + level], groups, entityTypes, level + 1, options)
                            }
                        });

                        // TODO refactor breadcrumbs_level


                        if (!groups.bootsGroup[level + 1]) {
                            if (options.breadcrumbs == true) {

                                if (groups.linesGroup.length) {

                                    items.forEach(function (resultItem) {

                                        resultItem['boot_level_' + level].forEach(function (bootItem) {

                                            bootItem['breadcrumbs_level_0'] = setGroups(bootItem.items, groups.linesGroup, entityTypes, setGroupOptions);

                                            setAncestors(bootItem, 0, 'breadcrumb', {bootLevel: level});

                                        });


                                    });
                                }

                            }
                        }

                    }

                } else {

                    if (options.breadcrumbs == true) {

                        if (groups.linesGroup.length) {

                            items.forEach(function (resultItem) {

                                resultItem['breadcrumbs_level_0'] = setGroups(resultItem.items, groups.linesGroup, entityTypes, setGroupOptions);

                            });
                        }

                    }
                }
            }


        }

        recursiveWalker(items, groups, entityTypes, level, options);

        //console.log('results', results);

        return results;
    }

    function isAdded(needle, stack, property) {

        var exist = false;

        stack.forEach(function (item) {
            if (item[property] == needle[property]) {
                exist = true;
            }
        });

        return exist;
    }

    function filterByID(obj) {
        if ('id' in obj.attribute_type_object && typeof(obj.attribute_type_object.id) === 'number' && !isNaN(obj.attribute_type_object.id)) {
            return true;
        } else {
            return false;
        }
    }

    var setGroupsWithColumns = function (items, groups, columns, entityTypes) {

        var preInitGroups = [];
        var bootsGroup = [];
        var linesGroup = [];

        var results = [];

        var bootsGroupStartMatching = null;

        function findBootsGroup() {

            groups.forEach(function (group, $groupIndex) {

                columns.forEach(function (column, $columnIndex) {

                    if (group.hasOwnProperty('id') && column.hasOwnProperty('id')) {
                        if (group.id == column.id) {

                            if (bootsGroupStartMatching == null) {
                                bootsGroupStartMatching = {
                                    groupIndex: $groupIndex,
                                    columnIndex: $columnIndex
                                };

                                bootsGroup.push(group);
                            } else {
                                if ($groupIndex - bootsGroupStartMatching.groupIndex == $columnIndex - bootsGroupStartMatching.columnIndex) {
                                    bootsGroup.push(group);
                                }
                            }

                        }
                    } else {
                        if (group.hasOwnProperty('key') && column.hasOwnProperty('key')) {
                            if (group.key == column.key) {

                                if (bootsGroupStartMatching == null) {
                                    bootsGroupStartMatching = {
                                        groupIndex: $groupIndex,
                                        columnIndex: $columnIndex
                                    };

                                    bootsGroup.push(group);
                                } else {

                                    if ($groupIndex - bootsGroupStartMatching.groupIndex == $columnIndex - bootsGroupStartMatching.columnIndex) {
                                        bootsGroup.push(group);
                                    }
                                }
                            }
                        }
                    }


                });

            });

            //console.log('bootsGroupStartMatching', bootsGroupStartMatching);

        }

        function findPreInitGroup() {
            groups.forEach(function (group, $groupIndex) {
                columns.forEach(function (column, $columnIndex) {

                        if ($groupIndex == $columnIndex) {
                            if ($groupIndex < bootsGroupStartMatching.groupIndex) {


                                if (group.hasOwnProperty('id') && column.hasOwnProperty('id')) {
                                    if (group.id !== column.id) {
                                        preInitGroups.push(group);
                                    }
                                } else {
                                    if (group.hasOwnProperty('key') && column.hasOwnProperty('key')) {
                                        if (group.key !== column.key) {
                                            preInitGroups.push(group);
                                        }
                                    } else {
                                        preInitGroups.push(group);
                                    }
                                }
                            }
                        }

                    }
                )
            });
        }

        function findLinesGroup() {
            groups.forEach(function (group, $groupIndex) {
                columns.forEach(function (column, $columnIndex) {
                    if (bootsGroupStartMatching.groupIndex !== null) {
                        if ($groupIndex > bootsGroupStartMatching.groupIndex + bootsGroup.length - 1) {
                            if (group.hasOwnProperty('id')) {
                                if (!isAdded(group, linesGroup, 'id')) {
                                    linesGroup.push(group);
                                }
                            } else {
                                if (!isAdded(group, linesGroup, 'key')) {
                                    linesGroup.push(group);
                                }
                            }
                        }
                    }

                })
            });
        }


        //items = extractDynamicAttributes(items);

        //console.log('TRANSFORMIN ITEMS WITH DYNAMIC ATTR PROPS', items);

        if (groups.length) {

            items.forEach(function (item, $index) {
                item._lid = $index;
            });

            findBootsGroup();
            findPreInitGroup();
            findLinesGroup();

            //console.log('preInitGroups', preInitGroups);
            //console.log('bootsGroup', bootsGroup);
            //console.log('linesGroup', linesGroup);

            var groups = {};

            if (preInitGroups.length) {

                var options = {
                    columns: columns
                };

                results = setGroups(items, preInitGroups, entityTypes, options);

                results.forEach(function (preInitGroupsItem) {

                    groups = {
                        preInitGroups: preInitGroups,
                        bootsGroup: bootsGroup,
                        linesGroup: linesGroup
                    };

                    preInitGroupsItem["boot_level_0"] = recursiveFillGroups(preInitGroupsItem.items, groups, entityTypes, {
                        boot: true,
                        breadcrumbs: true,
                        columns: columns
                    });

                });

            } else {

                groups = {
                    preInitGroups: preInitGroups,
                    bootsGroup: bootsGroup,
                    linesGroup: linesGroup
                };

                results = recursiveFillGroups(items, groups, entityTypes, {
                    boot: true,
                    breadcrumbs: true,
                    columns: columns
                });
            }

            //console.log('results1', results);

            return results;


        } else {
            return items;
        }

    };

    module.exports = {
        setGroups: setGroups,
        setGroupsWithColumns: setGroupsWithColumns
    }

}());

},{"./reportSubtotalService":23}],21:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var metaRepository = require('../repositories/metaRepository');

    var getMenu = function () {
        return metaRepository.getMenu();
    };

    var getBaseAttrs = function () {
        return metaRepository.getBaseAttrs();
    };

    var getEntityAttrs = function (entity) {
        return metaRepository.getEntityAttrs(entity);
    };

    var getValueTypes = function () {
        return metaRepository.getValueTypes();
    };

    var getEntitiesWithoutBaseAttrsList = function () {
        return metaRepository.getEntitiesWithoutBaseAttrsList();
    };

    var getEntitiesWithoutDynAttrsList = function () {
        return metaRepository.getEntitiesWithoutDynAttrsList();
    };

    var getRestrictedEntitiesWithTypeField = function () {
        return metaRepository.getRestrictedEntitiesWithTypeField();
    };

    var getTypeCaptions = function () {
        var filteredValueTypes = getValueTypes();
        //var filteredValueTypes = getValueTypes().filter(function (item) {
        //	// return item.value !== 'field' && item.value !== 'decoration';
        //	return item.value !== 'field';
        //});
        var typeCaptions = filteredValueTypes.map(function (item) {
            switch (item['display_name']) {
                case 'Number':
                    // item['caption_name'] = 'Integer';
                    item['caption_name'] = 'Whole number';
                    break;
                case 'Float':
                    item['caption_name'] = 'Number with decimals';
                    break;
                case 'Classifier':
                    item['caption_name'] = 'Classification';
                    break;
                case 'Field':
                    item['caption_name'] = 'Reference';
                    break;
                case 'String':
                    item['caption_name'] = 'Text';
                    break;
                case 'Boolean':
                    item['caption_name'] = 'True/False';
                    break;
                case 'Decoration':
                    item['caption_name'] = 'Decoration';
                    break;
                default:
                    item['caption_name'] = item['display_name'];
                    break;
            }
            return item;
        });
        //console.log(typeCaptions);
        return typeCaptions;
    };

    var groups = {
        "groupOne": "400px",
        "groupTwo": "600px",
        "groupThree": "300px",
        "groupFour": "450px",
        "groupFive": "200px",
        "newColumnAdded": false
    };

    var getDynamicAttrsValueTypes = function () {
        return metaRepository.getDynamicAttrsValueTypes();
    };

    var getDynamicAttrsValueTypesCaptions = function () {
        var filteredValueTypes = getDynamicAttrsValueTypes();
        //var filteredValueTypes = getValueTypes().filter(function (item) {
        //	// return item.value !== 'field' && item.value !== 'decoration';
        //	return item.value !== 'field';
        //});
        var typeCaptions = filteredValueTypes.map(function (item) {
            switch (item['display_name']) {
                case 'Number':
                    item['caption_name'] = 'Number with decimals';
                    break;
                case 'Classifier':
                    item['caption_name'] = 'Classification';
                    break;
                case 'Date':
                    item['caption_name'] = 'Date';
                    break;
                case 'String':
                    item['caption_name'] = 'Text';
                    break;
            }
            return item;
        });
        //console.log(typeCaptions);
        return typeCaptions;
    };

    var columnsWidthGroups = function (newColumn) {

        if (typeof newColumn === "boolean") {
            groups["newColumnAdded"] = newColumn;
        }
        else {
            return groups;
        }
    };

    var checkRestrictedEntityTypesForAM = function (entityType) {
        switch (entityType) {
            case "portfolio":
            case "account":
            case "counterparty":
            case "responsible":
            case "instrument":
            case "transaction":
            case "complex-transaction":
            case "strategies":
                return true;
                break;
            default:
                return false;
        }
    };

    var getEntityTabs = function (entityType) {
        return metaRepository.getEntityTabs(entityType);
    };

    var getEntitiesWithSimpleFields = function () {
        return metaRepository.getEntitiesWithSimpleFields();
    };

    var getFieldsWithTagGrouping = function(){
        return metaRepository.getFieldsWithTagGrouping();
    };

    module.exports = {
        getMenu: getMenu,
        getBaseAttrs: getBaseAttrs,
        getEntityAttrs: getEntityAttrs,
        getValueTypes: getValueTypes,
        getDynamicAttrsValueTypes: getDynamicAttrsValueTypes,
        getDynamicAttrsValueTypesCaptions: getDynamicAttrsValueTypesCaptions,
        getEntitiesWithoutBaseAttrsList: getEntitiesWithoutBaseAttrsList,
        getEntitiesWithoutDynAttrsList: getEntitiesWithoutDynAttrsList,
        getRestrictedEntitiesWithTypeField: getRestrictedEntitiesWithTypeField,
        getTypeCaptions: getTypeCaptions,
        columnsWidthGroups: columnsWidthGroups,
        getEntityTabs: getEntityTabs,
        getEntitiesWithSimpleFields: getEntitiesWithSimpleFields,
        checkRestrictedEntityTypesForAM: checkRestrictedEntityTypesForAM,
        getFieldsWithTagGrouping: getFieldsWithTagGrouping
    }

}());
},{"../repositories/metaRepository":13}],22:[function(require,module,exports){
/**
 * Created by szhitenev on 14.03.2017.
 */
(function () {

    'use strict';

    module.exports = function ($rootScope, $controller, $compile, $templateCache) {

        var dialogTemplate;
        var templateScope;
        var templateCtrl;
        var dialogElement;

        var create = function (options) {

            if (dialogElement) {
                dialogElement.html('');
            }

            dialogTemplate = $templateCache.get(options.templateUrl);

            templateScope = $rootScope.$new(true);
            templateCtrl = $controller(options.controller, {$scope: templateScope, data: options.locals.data});

            dialogElement = angular.element(dialogTemplate);

            dialogElement.children().data('$ngControllerController', templateCtrl);

            var compiled = $compile(dialogElement)(templateScope);

            $('body').append(compiled);

        };

        var hide = function (options) {

            dialogElement.html('');

            return new Promise(function (resolve, reject) {
                resolve(options);
            })
        };

        var cancel = function () {
            dialogElement.html('');
        };


        return {
            create: create,
            hide: hide,
            cancel: cancel
        };


    };
}());
},{}],23:[function(require,module,exports){
/**
 * Created by szhitenev on 23.11.2016.
 */
(function () {

    'use strict';

    function sum(calculatedColumns, column, group) {

        //console.log('calculatedColumns', calculatedColumns);
        //console.log('column', column);
        //console.log('group', group);

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            calculatedColumns[column.key] = calculatedColumns[column.key] + parseFloat(groupedItem[column.key]);

        });

    }

    function weightedMarketValue(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value"]) {

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * groupedItem["market_value"]));
            }

        });

    }

    function weightedMarketValuePercent(calculatedColumns, column, group) {
        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value_percent"]) {

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * groupedItem["market_value_percent"]));
            }

        });
    }

    function weightedExposure(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure"]) {

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * groupedItem["exposure"]));
            }

        });

    }

    function weightedExposurePercent(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure_percent"]) {

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * groupedItem["exposure_percent"]));
            }

        });

    }

    function weightedAverageMarketValue(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        var total = 0;

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value"]) {
                total = total + groupedItem["market_value"];
            }

        });

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value"]) {

                var average = groupedItem["market_value"] / total;

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * average));
            }

        });

    }

    function weightedAverageMarketValuePercent(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        var total = 0;

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value_percent"]) {
                total = total + groupedItem["market_value_percent"];
            }

        });

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value_percent"]) {

                var average = groupedItem["market_value_percent"] / total;

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * average));
            }

        });


    }

    function weightedAverageExposure(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        var total = 0;

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure"]) {
                total = total + groupedItem["exposure"];
            }

        });

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure"]) {

                var average = groupedItem["exposure"] / total;

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * average));
            }

        });

    }

    function weightedAverageExposurePercent(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        var total = 0;

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure_percent"]) {
                total = total + groupedItem["exposure_percent"];
            }

        });

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure_percent"]) {

                var average = groupedItem["exposure_percent"] / total;

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * average));
            }

        });

    }

    function resolveSubtotalFunction(calculatedColumns, column, group) {

        if (column.report_settings && column.report_settings.subtotal_formula_id) {

            switch (column.report_settings.subtotal_formula_id) {
                case 1:
                    sum(calculatedColumns, column, group);
                    break;
                case 2:
                    weightedMarketValue(calculatedColumns, column, group);
                    break;
                case 3:
                    weightedMarketValuePercent(calculatedColumns, column, group);
                    break;
                case 4:
                    weightedExposure(calculatedColumns, column, group);
                    break;
                case 5:
                    weightedExposurePercent(calculatedColumns, column, group);
                    break;
                case 6:
                    weightedAverageMarketValue(calculatedColumns, column, group);
                    break;
                case 7:
                    weightedAverageMarketValuePercent(calculatedColumns, column, group);
                    break;
                case 8:
                    weightedAverageExposure(calculatedColumns, column, group);
                    break;
                case 9:
                    weightedAverageExposurePercent(calculatedColumns, column, group);
                    break;
            }
        }


    }


    var calcColumnSubTotal = function (group, columns) {

        var calculatedColumns = {};

        columns.forEach(function (column) {

            if (column.value_type == 'float') {

                resolveSubtotalFunction(calculatedColumns, column, group);
            }
        });

        return calculatedColumns;
    };

    var groupByAndCalc = function (items, options) {

        var groups = [];

        if (options.calculationGroup) {

            items.forEach(function (item) {

                if (groups.length) {

                    var exist = false;

                    groups.forEach(function (groupItem) {
                        if (groupItem.name == options.calculationGroup + '_' + item[options.calculationGroup + '_object'].id) {
                            groupItem.items.push(item);
                            exist = true;
                        }
                    });

                    if (!exist) {
                        groups.push({
                            name: options.calculationGroup + '_' + item[options.calculationGroup + '_object'].id,
                            items: [item]
                        });
                    }

                } else {
                    groups.push({
                        name: options.calculationGroup + '_' + item[options.calculationGroup + '_object'].id,
                        items: [item]
                    });
                }

            });

        } else {
            groups.push({name: '', items: items});
        }

        groups.forEach(function (group) {

            var marketValueTotal = 0;
            var exposureValueTotal = 0;

            group.items.forEach(function (item) {
                marketValueTotal = marketValueTotal + item.market_value;
                exposureValueTotal = exposureValueTotal + item.exposure;
            });

            //console.log('marketValueTotal', marketValueTotal);
            //console.log('exposureValueTotal', exposureValueTotal);

            group.items.forEach(function (item) {

                if (marketValueTotal > 0) {
                    item.market_value_percent = item.market_value / marketValueTotal * 100;
                } else {
                    item.market_value_percent = 0;
                }
                if (exposureValueTotal > 0) {
                    item.exposure_percent = item.exposure / exposureValueTotal * 100;
                } else {
                    item.exposure_percent = 0;
                }
            })


        });


        return items;
    };

    module.exports = {
        calcColumnSubTotal: calcColumnSubTotal,
        groupByAndCalc: groupByAndCalc
    }

}());
},{}],24:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    /*
     sort: {
     column: "name",
     direction: "DESC"
     }
     */

    var groupSort = function (items, sort) {

        var i, g, valA, valB;

        if (items.length && items[0].groups) {
            //console.log('sort ID', sort);
            items = items.sort(function (a, b) {
                for (i = 0; i < b.groups.length; i = i + 1) {
                    for (g = 0; g < a.groups.length; g = g + 1) {
                        if (b.groups[i].key === sort.key || b.groups[i].key === sort.name
                            && a.groups[g].key === sort.key || a.groups[g].key === sort.name) {
                            if (b.groups[i].value !== null && !b.groups[i].value !== null) {
                                valA = a.groups[g].value + '';
                                valA = valA.toLowerCase();

                                valB = b.groups[i].value + '';
                                valB = valB.toLowerCase();

                                if (sort.sort === 'DESC') {
                                    if (valA < valB) {
                                        return -1;
                                    }
                                    if (valA > valB) {
                                        return 1;
                                    }

                                    // names must be equal
                                    return 0;
                                }

                                if (sort.sort === 'ASC') {
                                    if (valA > valB) {
                                        return -1;
                                    }
                                    if (valA < valB) {
                                        return 1;
                                    }

                                    // names must be equal
                                    return 0;
                                }
                            }
                        }
                    }
                }
            });
        }

        return items;

    };

    /*
     sort: {
     column: "name",
     direction: "DESC"
     }

     */

    function sortBasedOnId(items, sort) {
        return items.sort(function (a, b) {
            var nameA = a[sort.name].toLowerCase();
            var nameB = b[sort.name].toLowerCase();

            if (sort.sort === 'DESC') {
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
                return 0;
            }

            if (sort.sort === 'ASC') {
                if (nameA > nameB) {
                    return -1;
                }
                if (nameA < nameB) {
                    return 1;
                }
                return 0;
            }
        })

    }

    function sortBaseOnKey(items, sort) {
        return items.sort(function (a, b) {
            var nameA;
            var nameB;
            if (typeof a[sort.key] === 'number') {
                nameA = a[sort.key];
                nameB = b[sort.key];
            }
            if (typeof a[sort.key] === 'string') {
                //nameA = a[sort.key].toLowerCase();
                //nameB = b[sort.key].toLowerCase();
                nameA = a[sort.key];
                nameB = b[sort.key];
            }


            if (sort.sort === 'DESC') {
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }

                // names must be equal
                return 0;
            }

            if (sort.sort === 'ASC') {
                if (nameA > nameB) {
                    return -1;
                }
                if (nameA < nameB) {
                    return 1;
                }

                // names must be equal
                return 0;
            }


        })
    }


    var columnAdditionsSort = function (items, sort) {
        var g;
        if (sort.id) {
            //console.log('sort ID', sort);
            items = sortBasedOnId(items, sort)
        }
        if (sort.key) {
            items = sortBaseOnKey(items, sort)
        }
        //console.log('items', items);
        //console.log('sort', sort);

        return items;
    };

    var columnSort = function (items, sort) {
        //console.log('columnSort items', items);
        var g;
        if (items.length && items[0].groups) {
            if (sort.id) {
                //console.log('sort ID', sort);
                for (g = 0; g < items.length; g = g + 1) {
                    items[g].items = sortBasedOnId(items[g].items, sort)
                }
            }
            if (sort.key) {

                for (g = 0; g < items.length; g = g + 1) {
                    items[g].items = sortBaseOnKey(items[g].items, sort)
                }
            }
        } else {
            if (sort.id) {
                //console.log('sort ID', sort);
                items = sortBasedOnId(items, sort)
            }
            if (sort.key) {
                items = sortBaseOnKey(items, sort)
            }
        }

        console.log('columnSort items', items);
        console.log('sort', sort);

        return items;
    };

    module.exports = {
        group: {
            sort: groupSort
        },
        column: {
            additions: {
                sort: columnAdditionsSort
            },
            sort: columnSort
        }
    }

}());
},{}],25:[function(require,module,exports){
/**
 * Created by szhitenev on 10.03.2017.
 */
var app = angular.module('party.table', []);

app.component('partyTable', require('./app/components/partyTableComponent/partyTableComponent.js'));
app.component('tableShell', require('./app/components/tableShellComponent/tableShellComponent.js'));
app.component('tableBody', require('./app/components/tableBodyComponent/tableBodyComponent.js'));
app.component('sidebarArea', require('./app/components/sidebarAreaComponent/sidebarAreaComponent.js'));
app.component('groupingArea', require('./app/components/groupingAreaComponent/groupingAreaComponent.js'));
app.component('columnArea', require('./app/components/columnAreaComponent/columnAreaComponent.js'));

app.directive('groupBindAreaRow', [require('./app/directives/groupBindAreaRowDirective/groupBindAreaRowDirective.js')]);
app.directive('columnResize', [require('./app/directives/columnResizeDirective/columnResizeDirective.js')]);
app.directive('columnInitWidth', [require('./app/directives/columnInitWidthDirective/columnInitWidthDirective.js')]);
app.directive('dropdown', [require('./app/directives/dropdownDirective/dropdownDirective.js')]);
app.directive('dragDialog', [require('./app/directives/dragDialogDirective/dragDialogDirective')]);

app.service('ptDialog', ['$rootScope', '$controller', '$compile', '$templateCache', require('./app/services/ptDialogService')]);

app.controller('DialogController', ['$scope', 'ptDialog', 'data', require('./app/controllers/dialogController/dialogController.js')]);

//app.component('groupClipboardHandler', [require('./app/directives/groupTable/gClipboardHandlerComponent')]);
//app.component('groupColumnResizer', [require('./app/directives/groupTable/gColumnResizerComponent')]);
//app.component('groupHeightAligner', [require('./app/directives/groupTable/gHeightAlignerComponent')]);
//app.component('groupVerticalScroll', [require('./app/directives/groupTable/gVerticalScrollComponent')]);
//app.component('groupHorizontalScroll', [require('./app/directives/groupTable/gHorizontalScrollComponent')]);
//app.component('groupSecondVerticalScroll', [require('./app/directives/groupTable/gSecondVerticalScrollComponent')]);
//app.component('groupEditorBinder', ['$templateCache', '$compile', require('./app/directives/groupTable/groupEditorBinderComponent')]);
//app.component('groupColumnInitWidth', [require('./app/directives/groupTable/gColumnInitWidthComponent.js')]);
//
//app.component('groupBindReportRow', [require('./app/directives/groupTable/gBindReportRowDirective.js')]);
//
//app.controller('GReportSettingsDialogController', ['$scope', '$mdDialog', 'reportOptions', require('./app/controllers/dialogs/gReportSettingsDialogController')]);
//
//app.controller('gModalController', ['$scope', '$mdDialog', 'parentScope', 'callback', require('./app/directives/groupTable/gModalComponent')]);
//app.controller('gModalReportController', ['$scope', '$mdDialog', 'parentScope', 'callback', require('./app/directives/groupTable/gModalReportComponent')]);

require('./templates.min.js');
},{"./app/components/columnAreaComponent/columnAreaComponent.js":1,"./app/components/groupingAreaComponent/groupingAreaComponent.js":2,"./app/components/partyTableComponent/partyTableComponent.js":3,"./app/components/sidebarAreaComponent/sidebarAreaComponent.js":4,"./app/components/tableBodyComponent/tableBodyComponent.js":5,"./app/components/tableShellComponent/tableShellComponent.js":6,"./app/controllers/dialogController/dialogController.js":7,"./app/directives/columnInitWidthDirective/columnInitWidthDirective.js":8,"./app/directives/columnResizeDirective/columnResizeDirective.js":9,"./app/directives/dragDialogDirective/dragDialogDirective":10,"./app/directives/dropdownDirective/dropdownDirective.js":11,"./app/directives/groupBindAreaRowDirective/groupBindAreaRowDirective.js":12,"./app/services/ptDialogService":22,"./templates.min.js":26}],26:[function(require,module,exports){
!function(n){try{n=angular.module("party.table")}catch(e){n=angular.module("party.table",[])}n.run(["$templateCache",function(n){n.put("app/components/columnAreaComponent/column-area-component.html",'<div class="g-columns-component g-thead" column-init-width columns="columns"><div class="g-column-title-row"><p class="g-column-title"><span class="g-meta-circle red">C</span>OLUMN AREA</p></div><div class="g-cell-select all {{isAllSelected ? \'active\' : \'\'}}" data-ng-click="selectAllRows()"><ng-md-icon icon="signal_cellular_0_bar"></ng-md-icon></div><div class="g-scroll-wrapper" group-column-width-set init-width=""><div class="g-scrollable-area"><div dragula="\'columns-bag\'" dragula-model="columns" class="g-columns-holder"><div class="g-cell pt-card pt-column-card g-column" data-ng-repeat="column in columns"><div class="pt-cc-wrap"><div class="pt-cc-name-section"><div class="column-left-content"><div class="sort"><a class="column-sort column-btns" data-ng-show="column.options.sort === \'ASC\'" aria-label="open settings" data-ng-click="sortHandler(column, \'DESC\')"><i class="fa fa-angle-down" aria-hidden="true"></i> </a><a class="column-sort-up column-btns" data-ng-show="column.options.sort === \'DESC\'" aria-label="open settings" data-ng-click="sortHandler(column, \'ASC\')"><i class="fa fa-angle-up" aria-hidden="true"></i> </a><a class="column-sort column-both-sorted column-btns" data-ng-show="!column.options.sort" aria-label="open settings" data-ng-click="sortHandler(column, \'DESC\')"><i class="fa fa-angle-up" aria-hidden="true"></i> <i class="fa fa-angle-down" aria-hidden="true"></i></a></div><div class="caption">{{column.name}}</div></div></div><div class="pt-cc-settings-section"><!--<md-menu data-ng-if="options.isReport && isColumnFloat(column)">--><!--<md-button aria-label="Open phone interactions menu" class="md-icon-button column-btns"--><!--ng-click="$mdOpenMenu($event)">--><!--<ng-md-icon icon="settings"></ng-md-icon>--><!--</md-button>--><!--<md-menu-content width="4">--><!--<md-menu-item>--><!--<md-menu>--><!--<md-button ng-click="selectSubtotalType(column, 1)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 1)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 1)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Subtotal SUM</span>--><!--</md-button>--><!--<md-menu-content style="display: none"></md-menu-content>--><!--</md-menu>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-menu>--><!--<md-button aria-label="Open phone interactions menu"--><!--class=""--><!--ng-click="$mdOpenMenu($event)">--><!--<ng-md-icon icon="done"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<span>Subtotal Weighted</span>--><!--<ng-md-icon icon="arrow_drop_up" class="z-dropdown-icon"></ng-md-icon>--><!--</md-button>--><!--<md-menu-content width="3">--><!--<md-menu-item>--><!--<md-button ng-click="selectSubtotalType(column, 2)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 2)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 2)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Market Value</span>--><!--</md-button>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-button ng-click="selectSubtotalType(column, 3)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 3)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 3)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Market Value %</span>--><!--</md-button>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-button ng-click="selectSubtotalType(column, 4)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 4)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 4)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Exposure</span>--><!--</md-button>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-button ng-click="selectSubtotalType(column, 5)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 5)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 5)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Exposure %</span>--><!--</md-button>--><!--</md-menu-item>--><!--</md-menu-content>--><!--</md-menu>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-menu>--><!--<md-button aria-label="Open phone interactions menu"--><!--class=""--><!--ng-click="$mdOpenMenu($event)">--><!--<ng-md-icon icon="done"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<span>Subtotal Avg. Weighted</span>--><!--<ng-md-icon icon="arrow_drop_up" class="z-dropdown-icon"></ng-md-icon>--><!--</md-button>--><!--<md-menu-content width="3">--><!--<md-menu-item>--><!--<md-button ng-click="selectSubtotalType(column, 6)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 6)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 6)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Market Value</span>--><!--</md-button>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-button ng-click="selectSubtotalType(column, 7)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 7)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 7)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Market Value %</span>--><!--</md-button>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-button ng-click="selectSubtotalType(column, 8)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 8)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 8)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Exposure</span>--><!--</md-button>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-button ng-click="selectSubtotalType(column, 9)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="!checkSubtotalFormula(column, 9)"--><!--class="z-menu-icon"--><!--style="visibility: hidden;"></ng-md-icon>--><!--<ng-md-icon icon="done"--><!--data-ng-show="checkSubtotalFormula(column, 9)"--><!--class="z-menu-icon"></ng-md-icon>--><!--<span>Exposure %</span>--><!--</md-button>--><!--</md-menu-item>--><!--</md-menu-content>--><!--</md-menu>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-menu>--><!--<md-button ng-click="reportHideSubtotal(column)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done" style="visibility: hidden;"></ng-md-icon>--><!--<span data-ng-show="!column.report_settings.hide_subtotal">Hide subtotal</span><span--><!--data-ng-show="column.report_settings.hide_subtotal">Show subtotal</span>--><!--</md-button>--><!--<md-menu-content style="display: none"></md-menu-content>--><!--</md-menu>--><!--</md-menu-item>--><!--<md-menu-item>--><!--<md-menu>--><!--<md-button ng-click="removeColumn(column)" class="g-settings-option-btn">--><!--<ng-md-icon icon="visibility_off"></ng-md-icon>--><!--<span>Remove</span>--><!--</md-button>--><!--<md-menu-content style="display: none"></md-menu-content>--><!--</md-menu>--><!--</md-menu-item>--><!--</md-menu-content>--><!--</md-menu>--><!--<md-menu data-ng-if="options.isReport && !isColumnFloat(column)">--><!--<md-button aria-label="Open phone interactions menu" class="md-icon-button column-btns"--><!--ng-click="$mdOpenMenu($event)">--><!--<ng-md-icon icon="settings"></ng-md-icon>--><!--</md-button>--><!--<md-menu-content>--><!--<md-menu-item>--><!--<md-menu>--><!--<md-button ng-click="removeColumn(column)" class="g-settings-option-btn">--><!--<ng-md-icon icon="visibility_off"></ng-md-icon>--><!--<span>Remove</span>--><!--</md-button>--><!--<md-menu-content style="display: none"></md-menu-content>--><!--</md-menu>--><!--</md-menu-item>--><!--</md-menu-content>--><!--</md-menu>--><!--<md-menu data-ng-if="!options.isReport">--><!--<md-button aria-label="Open phone interactions menu" class="md-icon-button column-btns"--><!--ng-click="$mdOpenMenu($event)">--><!--<ng-md-icon icon="settings"></ng-md-icon>--><!--</md-button>--><!--<md-menu-content width="4">--><!--<md-menu-item>--><!--<md-button ng-click="removeColumn(column)" class="g-settings-option-btn">--><!--<ng-md-icon icon="visibility_off"></ng-md-icon>--><!--<span>Remove</span>--><!--</md-button>--><!--</md-menu-item>--><!--</md-menu-content>--><!--</md-menu>--><div class="pt-dropdown" data-dropdown><a class="pt-icon-button pt-button"><i class="fa fa-gear"></i></a><ul class="pt-dropdown-content"><li><a ng-click="removeColumn(column)" class="g-settings-option-btn pt-button"><span>Remove</span></a></li></ul></div><!--<div class="column-name-tooltip-wrap" data-ng-show="false">--><!--<div class="column-name-tooltip-content">--><!--<span data-ng-bind="column.name"></span>--><!--</div>--><!--</div>--></div></div><div class="resize-slider"></div></div></div><div class="drop-new-field" id="columnsbag" data-ng-if="options.interface.dragging">Drop New Column</div></div></div></div>')}])}(),function(n){try{n=angular.module("party.table")}catch(e){n=angular.module("party.table",[])}n.run(["$templateCache",function(n){n.put("app/components/groupingAreaComponent/grouping-area-component.html",'<div class="g-grouping-component"><div><p class="g-drag-section-title"><span class="g-meta-circle green">G</span>ROUPING AREA</p></div><div class="g-second-line"><div class="groups-holder"><div class="group-folding-holder" data-ng-if="!options.isReport && false"><div class="pt-card"><div><!--<div class="fold-btn-wrap {{folding ? \'\' : \'disabled\'}}">--><div class="fold-btn-wrap"><md-button class="grouping-fold-btn" aria-label="hide/show grouping" data-ng-click="toggleGroupFold()"><ng-md-icon icon="add"></ng-md-icon></md-button></div><!--<div class="fold-btn-wrap {{folding ? \'disabled\' : \'\'}}">--><div class="fold-btn-wrap"><md-button class="grouping-fold-btn" aria-label="hide/show grouping" data-ng-click="toggleGroupFold()"><ng-md-icon icon="remove"></ng-md-icon></md-button></div></div></div></div><div dragula="\'group-bag\'" dragula-model="grouping"><div data-ng-repeat="item in options.grouping track by $index" class="pt-card group-item"><div class="sort"><a class="group-sort" data-ng-show="item.options.sort === \'ASC\'" aria-label="open settings" data-ng-click="sortHandler(item, \'DESC\')"><i class="fa fa-angle-down" aria-hidden="true"></i> </a><a class="group-sort-up" data-ng-show="item.options.sort === \'DESC\'" aria-label="open settings" data-ng-click="sortHandler(item, \'ASC\')"><i class="fa fa-angle-up" aria-hidden="true"></i> </a><a class="group-sort group-both-sorted" data-ng-show="!item.options.sort" aria-label="open settings" data-ng-click="sortHandler(item, \'DESC\')"><i class="fa fa-angle-up" aria-hidden="true"></i> <i class="fa fa-angle-down" aria-hidden="true"></i></a></div><div class="caption">{{item.name}}</div><div class="settings-btn"><!--<md-menu data-ng-if="options.isReport">--><!--<md-button aria-label="Open phone interactions menu" class="md-icon-button"--><!--ng-click="openGroupSettings($mdOpenMenu, $event)">--><!--<ng-md-icon icon="settings"></ng-md-icon>--><!--</md-button>--><!--<md-menu-content width="4">--><!--<md-menu-item>--><!--<md-button ng-click="removeGroup(item)" class="g-settings-option-btn">--><!--<ng-md-icon icon="visibility_off"></ng-md-icon>--><!--<span>Remove</span>--><!--</md-button>--><!--</md-menu-item>--><!--<md-menu-item data-ng-if="isReportGroupHaveExtSettings(item, $index, \'line\')">--><!--<md-button md-prevent-menu-close="md-prevent-menu-close"--><!--ng-click="reportSetSubtotalType(item, \'line\', $index)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="item.report_settings.subtotal_type == \'line\'"></ng-md-icon>--><!--<ng-md-icon icon="done" style="visibility: hidden;"--><!--data-ng-show="item.report_settings.subtotal_type != \'line\'"></ng-md-icon>--><!--<span>Line subtotal</span>--><!--</md-button>--><!--</md-menu-item>--><!--<md-menu-item data-ng-if="isReportGroupHaveExtSettings(item, $index, \'area\')">--><!--<md-button md-prevent-menu-close="md-prevent-menu-close"--><!--ng-click="reportSetSubtotalType(item, \'area\', $index)"--><!--class="g-settings-option-btn">--><!--<ng-md-icon icon="done"--><!--data-ng-show="item.report_settings.subtotal_type == \'area\'"></ng-md-icon>--><!--<ng-md-icon icon="done" style="visibility: hidden;"--><!--data-ng-show="item.report_settings.subtotal_type != \'area\'"></ng-md-icon>--><!--<span>Area subtotal</span>--><!--</md-button>--><!--</md-menu-item>--><!--</md-menu-content>--><!--</md-menu>--><div class="pt-dropdown" data-dropdown><a class="pt-icon-button pt-button"><i class="fa fa-gear"></i></a><ul class="pt-dropdown-content"><li><a ng-click="removeGroup(item)" class="g-settings-option-btn pt-button"><span>Remove</span></a></li></ul></div></div></div></div><div class="drop-new-group" id="groupsbag" data-ng-if="options.interface.dragging"><!-- Drop level {{grouping.length + 1}} Group --> Drop New Grouping Level</div></div><a class="pt-button pt-round-button g-settings-btn" aria-label="drag modal" data-ng-click="openModalSettings($event)"><i class="fa fa-bars"></i></a></div></div>')}])}(),function(n){try{n=angular.module("party.table")}catch(e){n=angular.module("party.table",[])}n.run(["$templateCache",function(n){n.put("app/components/partyTableComponent/party-table-component.html",'<table-shell class="pt-app"></table-shell>')}])}(),function(n){try{n=angular.module("party.table")}catch(e){n=angular.module("party.table",[])}n.run(["$templateCache",function(n){n.put("app/components/sidebarAreaComponent/sidebar-area-component.html",'<div class="g-sidebar-filter-component"><div><p class="area-title g-section-title"><span class="g-meta-circle blue">F</span><span class="after-text">ILTER AREA</span></p></div><div data-ng-if="false"><div class="filters-control-btn s-f-expanded-btns"><md-button class="md-raised" data-ng-click="selectAll()">Select all</md-button><md-button class="md-raised" data-ng-click="deselectAll()">Deselect all</md-button></div><div class="filters-control-btn s-f-expanded-btns"><md-button class="md-raised clear-all full-width" data-ng-click="clearAll()">Clear all</md-button></div></div><div dragula="\'filters-bag\'" dragula-model="filters" class="filters-holder"><div data-ng-repeat="filter in filters" class="{{filter.options.enabled ? \'\' : \'f-disabled\' }} g-filter-item pt-card pt-filter-card"><div class="pt-fc-checkbox-section"><div class="pt-checkbox-control"><label><input type="checkbox" ng-model="filter.options.enabled" aria-label="filters" ng-change="toggleFilterState(filter)"> <span class="pt-checkbox-span"><span class="pt-checkbox-span-check"></span></span></label></div></div><div class="pt-fc-input-section"><label data-ng-bind="filter.name"></label><div data-ng-if="getFilterType(filter[\'value_type\'])"><!-- {{fields}} --><div data-ng-if="fields[filter.key]"><md-select data-ng-model="filter.options.query" md-on-close="searchTerm = \'\'" data-ng-change="filterChange(filter)" multiple="{{fields[\'value_type\'] == \'mc_field\' ? \'true\' : \'false\'}}"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields[filter.key] | orderBy:\'-\'+field.name | filter:{ name:searchTerm} track by $index" value="{{field.id}}">{{field.name}}</md-option></md-select></div><div data-ng-if="!fields[filter.key]"><div><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div><!-- <div data-ng-if="filter[\'value_type\'] !== \'field\'"> --><div data-ng-if="!getFilterType(filter[\'value_type\'])"><input data-ng-model="filter.options.query" data-ng-change="filterChange(filter)" data-ng-model-options="{debounce: 1000}"></div></div><div class="pt-fc-settings-section"><div class="settings-btn"><md-menu data-ng-if="options.isRootEntityViewer"><md-button aria-label="Open phone interactions menu" class="md-icon-button" ng-click="openFilterSettings($mdOpenMenu, $event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="removeFilter(filter)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button></md-menu-item></md-menu-content></md-menu><md-menu data-ng-if="!options.isRootEntityViewer && false"><md-button aria-label="Open phone interactions menu" class="md-icon-button" ng-click="openFilterSettings($mdOpenMenu, $event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="removeFilter(filter)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button></md-menu-item><md-menu-item><md-button ng-click="useFromAbove(filter)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="filter.options.useFromAbove"></ng-md-icon><ng-md-icon icon="done" style="visibility: hidden" data-ng-show="!filter.options.useFromAbove"></ng-md-icon><span>Use from above</span></md-button></md-menu-item></md-menu-content></md-menu></div></div></div></div><div class="drop-new-filter" data-ng-if="options.interface.dragging">Drop new Filter</div></div>')}])}(),function(n){try{n=angular.module("party.table")}catch(e){n=angular.module("party.table",[])}n.run(["$templateCache",function(n){n.put("app/components/tableBodyComponent/table-body-component.html",'<!--<div class="g-table-body-component" data-group-vertical-scroll>--><div class="g-table-body-component custom-scrollbar" data-custom-scroll data-scroll-sticky="true"><div data-ng-if="!checkReady()"><div><md-progress-linear md-mode="indeterminate"></md-progress-linear></div></div><!--<div data-ng-show="checkReady()" ng-cloak style="padding-bottom: 75px">--><div data-ng-show="checkReady()" ng-cloak><div><div data-ng-if="options.grouping.length" contextmenu-container="gtbody.contextmenu"><div data-ng-if="options.grouping_type == \'breadcrumbs\'"><div data-ng-repeat="item in itemsProjection()"><div class="g-group-holder {{ checkRowSelection(item) ? \'selected-row\' : \'\' }}"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="pt-card group-row-fold-holder"><div><a class="pt-button" aria-label="hide/show grouping" data-ng-show="item.isFolded" data-ng-click="toggleGroupFold(item)"><i class="fa fa-plus"></i> </a><a class="pt-button" aria-label="hide/show grouping" data-ng-show="!item.isFolded" data-ng-click="toggleGroupFold(item)"><i class="fa fa-minus"></i></a></div></div><div data-ng-repeat="group in item.groups track by $index" class="g-group"><span data-ng-bind="bindGroupValue(group)"></span></div></div><div data-ng-repeat="groupedItem in item.items" contextmenu-item="groupedItem" data-ng-show="!item.isFolded" data-ng-right-click="$mdOpenMenu($event)" class="{{ checkRowSelection(groupedItem) ? \'selected-row\' : \'\'}} g-row" data-ng-click="rowCallback(groupedItem, $event)"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, groupedItem)"><ng-md-icon icon="done" data-ng-show="groupedItem.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns"><div class="g-cell {{getAlign(column)}}"><!--<span title="{{bindCellTitle(groupedItem, column)}}"--><!--data-ng-bind-html="bindCell(groupedItem, column)"></span>--> <span title="{{bindCellTitle(groupedItem, column)}}" data-ng-bind="bindCell(groupedItem, column)"></span></div></div></div></div></div><div data-ng-if="options.grouping_type == \'area\'" class="report-holder"><!-- preInit.initGroup start --><group-bind-area-row data-ng-repeat="item in reportItemsProjection() track by $index" item="item"></group-bind-area-row><!-- !preInit.initGroup end--></div></div><div data-ng-if="!options.grouping.length" contextmenu-container="gtbody.contextmenu"><div data-ng-repeat="item in itemsProjection()" class="{{ checkRowSelection(item) ? \'selected-row\' : \'\'}} g-row" contextmenu-item="item" data-ng-click="rowCallback(item, $event)"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns"><div class="g-cell {{getAlign(column)}}"><!--<span title="{{bindCellTitle(item, column)}}"--><!--data-ng-bind-html="bindCell(item, column)"></span>--> <span title="{{bindCellTitle(item, column)}}" data-ng-bind="bindCell(item, column)"></span></div></div></div></div></div><div class="table-end-row"></div>{{paginationItemsTotal}}<div paging class="g-table-body-pagination" page="options.paginationPageCurrent" page-size="options.paginationItemPerPage" total="options.paginationItemsTotal" paging-action="changePage(page)"></div></div></div><div contextmenu="gtbody.contextmenu" class="dropdown contextmenu ng-hide"><md-menu-content width="4"><md-menu-item><md-button ng-click="editEntity($event, gtbody.contextmenu.get().item)" class="g-settings-option-btn"><ng-md-icon icon="mode_edit"></ng-md-icon><span>Edit</span></md-button></md-menu-item><md-menu-item><md-button ng-click="deleteEntity($event, gtbody.contextmenu.get().item)" class="g-settings-option-btn"><ng-md-icon icon="delete"></ng-md-icon><span>Delete</span></md-button></md-menu-item></md-menu-content></div>')}])}(),function(n){try{n=angular.module("party.table")}catch(e){n=angular.module("party.table",[])}n.run(["$templateCache",function(n){n.put("app/components/tableShellComponent/table-shell-component.html",'<div class="g-wrapper" data-group-height-aligner data-options="options"><div class="g-workarea-wrap"><div class="g-workarea main-area" data-group-clipboard-handler data-items="items" data-columns="columns"><div class="g-grouping-section"><grouping-area options="options"></grouping-area></div><div class="g-table-section"><div data-custom-scroll class="custom-scrollbar" data-scroll-y="false"><div class="g-table-wrap" column-resize><column-area options="options" items="items"></column-area><table-body class="table-body" options="options" items="items"></table-body></div></div></div></div></div><div class="g-filter-sidebar main-sidebar"><div data-custom-scroll class="custom-scrollbar"><div class="g-filter" id="filtersbag"><sidebar-area options="options" report-options="reportOptions"></sidebar-area></div></div></div><div class="g-additions" data-ng-if="checkAdditions()"><div class="g-height-slider"></div><div class="g-additions-data-editor min-height" data-ng-show="options.additionsStatus.editor"><div data-ng-show="!options.editorEntityId"><div class="g-additions-editor-caption">Select row to start</div></div><div data-ng-show="options.editorEntityId" class="min-height"><group-editor-binder options="options"></group-editor-binder></div></div><div class="g-additions-workarea" data-ng-if="options.additionsStatus.permissionEditor"><div data-ng-include="\'views/entity-viewer/permission-editor-view.html\'" class="min-height"></div></div><div class="g-additions-workarea" data-ng-if="options.additionsStatus.reportWizard"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="min-height"></div></div><div class="g-extra-features" data-ng-if="findSelectedFeature().isOpened"><div data-ng-include="{{findSelectedFeature().templateUrl}}"></div></div></div></div>')}])}(),function(n){try{n=angular.module("party.table")}catch(e){n=angular.module("party.table",[])}n.run(["$templateCache",function(n){n.put("app/controllers/dialogController/dialog-view.html",'<div aria-label="Area configuration" ng-cloak class="pt-app pt-dialog g-modal-dialog draggable-dialog" drag-dialog><div class="pt-dialog-header pt-drag-target"><div class="md-toolbar-tools" layout="row" layout-align="start center"><h2 style="user-select: none; position: relative">View Constructor</h2></div></div><div class="pt-dialog-body"><div data-ng-if="vm.readyStatus.content"><md-tabs md-dynamic-height md-border-bottom id="dialogbag"><md-tab label="entity.name" data-ng-repeat="entity in vm.entities"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in entity.attributes"><div class="pt-dialog-control-row"><div class="pt-checkbox-control pt-ds-column-checkbox"><label><input type="checkbox" ng-model="item.columns" aria="columns" data-ng-change="vm.updateAttrs()"> <span class="pt-checkbox-span"><span class="pt-checkbox-span-check"></span></span></label></div><div class="pt-checkbox-control pt-ds-group-checkbox"><label><input type="checkbox" ng-style="vm.checkAreaAccessibility(item, \'group\') ? {\'visibility\': \'hidden\'} : {}" ng-model="item.groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"> <span class="pt-checkbox-span"><span class="pt-checkbox-span-check"></span></span></label></div><div class="pt-checkbox-control pt-ds-filter-checkbox"><label><input type="checkbox" ng-style="vm.checkAreaAccessibility(item, \'filter\') ? {\'visibility\': \'hidden\'} : {}" ng-model="item.filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"> <span class="pt-checkbox-span"><span class="pt-checkbox-span-check"></span></span></label></div></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{item.name}}</md-card></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.content" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div><div class="pt-dialog-footer"><a class="pt-button pt-raised pt-ink-ripple pt-accent" ng-click="vm.cancel()">OK</a></div></div>')}])}(),function(n){try{n=angular.module("party.table")}catch(e){n=angular.module("party.table",[])}n.run(["$templateCache",function(n){n.put("app/directives/groupBindAreaRowDirective/group-bind-area-row-directive.html",'<div data-ng-show="itemIsFolded(item)" class="{{item.isFirstOfFolded ? \'folded-root-item\' : \'\'}}"><div data-ng-if="item.type == \'preinit\'" class="g-row report-preinit-row"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div data-ng-repeat="group in item.value track by $index" class="g-group"><span data-ng-bind="bindGroupValue(group)"></span></div></div><div data-ng-if="item.type == \'init\'" class="g-row report-init-row"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div data-ng-repeat="group in item.value track by $index" class="g-group"><span data-ng-bind="bindGroupValue(group)"></span></div></div><div data-ng-if="item.type == \'breadcrumbs\'" class="g-row report-breacrumbs-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in item.cellsCaptions track by $index"><div class="g-cell {{resolveReportCellBackground(\'header\', item, column, $index)}} {{resolveReportCellBorder(\'header\', item, column, $index)}}"><!--{{item.cellsCaptions}}--> {{bindGroupValue(item.cellsCaptions[$index])}}</div></div><div class="g-cell g-cell-group"><div data-ng-repeat="group in item.value track by $index"><span data-ng-bind="bindGroupValue(group)"></span></div></div></div></div><div data-ng-if="item.type == \'header\'" class="g-row report-header-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns track by $index"><div class="g-cell {{resolveReportCellBackground(\'header\', item, column, $index)}} {{resolveReportCellBorder(\'header\', item, column, $index)}}" data-ng-if="checkReportColumnCaption(item.cellsCaptions, column, $index)"><!--{{item.cellsCaptions[$index][\'comparePattern\']}}--> {{bindGroupValue(item.cellsCaptions[$index])}}</div><div class="g-cell {{getAlign(column)}} {{resolveReportCellBorder(\'header\', item, column, $index)}}" data-ng-if="!checkReportColumnCaption(item.cellsCaptions, column, $index)"><span title="{{bindCellTitle(item, column)}}" data-ng-bind="bindCell(item.value, column)"></span></div></div></div></div><div data-ng-if="item.type == \'normal\'" class="g-row report-normal-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns track by $index"><div class="g-cell {{resolveReportCellBackground(\'normal\', item, column, $index)}} {{resolveReportCellBorder(\'normal\', item, column, $index)}}" data-ng-if="checkReportColumnCaption(item.cellsCaptions, column, $index)"><md-card class="group-row-fold-holder _md" data-ng-if="bindGroupValue(item.cellsCaptions[$index]) != \'\'"><div><md-button class="" aria-label="hide/show grouping" data-ng-show="item.cellsCaptions[$index].isFolded" data-ng-click="toggleGroupFold(item, $index)"><ng-md-icon icon="add"></ng-md-icon></md-button><md-button class="" aria-label="hide/show grouping" data-ng-show="!item.cellsCaptions[$index].isFolded" data-ng-click="toggleGroupFold(item, $index)"><ng-md-icon icon="remove"></ng-md-icon></md-button></div></md-card>{{bindGroupValue(item.cellsCaptions[$index])}}</div><div class="g-cell {{getAlign(column)}} {{resolveReportCellBorder(\'normal\', item, column, $index)}}" data-ng-if="!checkReportColumnCaption(item.cellsCaptions, column, $index)"><span title="{{bindCellTitle(item.value, column)}}" data-ng-bind="bindCell(item.value, column, {reportItem: item})"></span></div></div></div></div><div data-ng-if="item.type == \'subtotal-line\'" class="g-row report-subtotal-line-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns track by $index"><div class="g-cell {{resolveReportCellBackground(\'subtotal-line\', item, column, $index)}} {{resolveReportCellBorder(\'subtotal\', item, column, $index)}}" data-ng-if="checkReportColumnCaption(item.cellsCaptions, column, $index)"><md-card class="group-row-fold-holder _md" data-ng-if="bindGroupValue(item.cellsCaptions[$index]) != \'\'"><div><md-button class="" aria-label="hide/show grouping" data-ng-show="item.cellsCaptions[$index].isFolded" data-ng-click="toggleGroupFold(item, $index)"><ng-md-icon icon="add"></ng-md-icon></md-button><md-button class="" aria-label="hide/show grouping" data-ng-show="!item.cellsCaptions[$index].isFolded" data-ng-click="toggleGroupFold(item, $index)"><ng-md-icon icon="remove"></ng-md-icon></md-button></div></md-card><b data-ng-if="$index !== 0"><span data-ng-if="isSubtotalHided(column)" title="{{bindCellTitle(item.value, column)}}" data-ng-bind="bindCellSubTotal(item.value, column)"></span></b></div><div class="g-cell {{getAlign(column)}} {{resolveReportCellItemBackground(\'subtotal-line\', item, column, $index)}} {{resolveReportCellBorder(\'subtotal\', item, column, $index)}}" data-ng-if="!checkReportColumnCaption(item.cellsCaptions, column, $index)"><b><span title="{{bindCellTitle(item.value, column)}}" data-ng-if="isSubtotalHided(column)" data-ng-bind="bindCellSubTotal(item.value, column)"></span></b></div></div></div></div><div data-ng-if="item.type == \'subtotal\'" class="g-row report-subtotal-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns track by $index"><div class="g-cell {{resolveReportCellBackground(\'subtotal\', item, column, $index)}} {{resolveReportCellBorder(\'subtotal\', item, column, $index)}}" data-ng-if="checkReportColumnCaption(item.cellsCaptions, column, $index)"><span data-ng-if="isSubtotalHided(column)" data-ng-bind="item.cellsCaptions[$index].value"></span></div><div class="g-cell {{getAlign(column)}} {{resolveReportCellItemBackground(\'subtotal\', item, column, $index)}} {{resolveReportCellBorder(\'subtotal\', item, column, $index)}}" data-ng-if="!checkReportColumnCaption(item.cellsCaptions, column, $index)"><b><span title="{{bindCellTitle(item.value, column)}}" data-ng-if="isSubtotalHided(column)" data-ng-bind="bindCellSubTotal(item.value, column)"></span></b></div></div></div></div></div>');
}])}();
},{}]},{},[25]);
